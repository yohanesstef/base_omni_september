
base_omni_september.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069bc  080069bc  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c4  080069c4  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  080069cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          0000042c  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011692  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a0  00000000  00000000  0003179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ddb  00000000  00000000  00035488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105e8  00000000  00000000  00057263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe45  00000000  00000000  0006784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00133690  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039c8  00000000  00000000  001336e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006960 	.word	0x08006960

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	08006960 	.word	0x08006960

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_DMA_Init+0x3c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2010      	movs	r0, #16
 8000e84:	f001 fd8f 	bl	80029a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e88:	2010      	movs	r0, #16
 8000e8a:	f001 fda8 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <MX_GPIO_Init+0x150>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a45      	ldr	r2, [pc, #276]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <MX_GPIO_Init+0x150>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_GPIO_Init+0x150>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b38      	ldr	r3, [pc, #224]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a37      	ldr	r2, [pc, #220]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a30      	ldr	r2, [pc, #192]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_GPIO_Init+0x150>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_2A_GPIO_Port, dir_2A_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	482b      	ldr	r0, [pc, #172]	; (8000ff0 <MX_GPIO_Init+0x154>)
 8000f44:	f002 fb04 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dir_1A_Pin|dir_1B_Pin|dir_3B_Pin|dir_0A_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f640 0107 	movw	r1, #2055	; 0x807
 8000f4e:	4829      	ldr	r0, [pc, #164]	; (8000ff4 <MX_GPIO_Init+0x158>)
 8000f50:	f002 fafe 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir_3A_Pin|dir_0B_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <MX_GPIO_Init+0x15c>)
 8000f5c:	f002 faf8 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir_2B_GPIO_Port, dir_2B_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f66:	4825      	ldr	r0, [pc, #148]	; (8000ffc <MX_GPIO_Init+0x160>)
 8000f68:	f002 faf2 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_2A_Pin;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(dir_2A_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <MX_GPIO_Init+0x154>)
 8000f84:	f002 f948 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = dir_1A_Pin|dir_1B_Pin|dir_3B_Pin|dir_0A_Pin;
 8000f88:	f640 0307 	movw	r3, #2055	; 0x807
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_GPIO_Init+0x158>)
 8000fa2:	f002 f939 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = dir_3A_Pin|dir_0B_Pin;
 8000fa6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_GPIO_Init+0x15c>)
 8000fc0:	f002 f92a 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dir_2B_Pin;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(dir_2B_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <MX_GPIO_Init+0x160>)
 8000fde:	f002 f91b 	bl	8003218 <HAL_GPIO_Init>

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40020c00 	.word	0x40020c00

08001000 <HAL_UART_RxHalfCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef* huart){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_UART_RxHalfCpltCallback+0x50>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11a      	bne.n	8001048 <HAL_UART_RxHalfCpltCallback+0x48>
		if (joystick_value[0] == 'i' && joystick_value[1] == 't' && joystick_value[2] == 's'){
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_UART_RxHalfCpltCallback+0x54>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b69      	cmp	r3, #105	; 0x69
 8001018:	d10b      	bne.n	8001032 <HAL_UART_RxHalfCpltCallback+0x32>
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_RxHalfCpltCallback+0x54>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	2b74      	cmp	r3, #116	; 0x74
 8001020:	d107      	bne.n	8001032 <HAL_UART_RxHalfCpltCallback+0x32>
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_UART_RxHalfCpltCallback+0x54>)
 8001024:	789b      	ldrb	r3, [r3, #2]
 8001026:	2b73      	cmp	r3, #115	; 0x73
 8001028:	d103      	bne.n	8001032 <HAL_UART_RxHalfCpltCallback+0x32>
			joystick_status = 1;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_UART_RxHalfCpltCallback+0x58>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
			joystick_status= 0;
			HAL_UART_DMAStop(&huart2);
			HAL_UART_Receive_DMA(&huart2, joystick_value, 9);
		}
	}
}
 8001030:	e00a      	b.n	8001048 <HAL_UART_RxHalfCpltCallback+0x48>
			joystick_status= 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_UART_RxHalfCpltCallback+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
			HAL_UART_DMAStop(&huart2);
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <HAL_UART_RxHalfCpltCallback+0x5c>)
 800103a:	f003 ffa2 	bl	8004f82 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart2, joystick_value, 9);
 800103e:	2209      	movs	r2, #9
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <HAL_UART_RxHalfCpltCallback+0x54>)
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <HAL_UART_RxHalfCpltCallback+0x5c>)
 8001044:	f003 ff6d 	bl	8004f22 <HAL_UART_Receive_DMA>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40004400 	.word	0x40004400
 8001054:	20000110 	.word	0x20000110
 8001058:	2000010e 	.word	0x2000010e
 800105c:	200004bc 	.word	0x200004bc

08001060 <input_analog>:

void input_analog(){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if (joystick_status == 1){
 8001064:	4b72      	ldr	r3, [pc, #456]	; (8001230 <input_analog+0x1d0>)
 8001066:	f993 3000 	ldrsb.w	r3, [r3]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d127      	bne.n	80010be <input_analog+0x5e>
		joystick_button = ~(joystick_value[3] + (joystick_value[4]<<8));
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <input_analog+0x1d4>)
 8001070:	78db      	ldrb	r3, [r3, #3]
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <input_analog+0x1d4>)
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29b      	uxth	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <input_analog+0x1d8>)
 8001088:	801a      	strh	r2, [r3, #0]
		joystick_analog[0]= (joystick_value [7]-127);
 800108a:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <input_analog+0x1d4>)
 800108c:	79db      	ldrb	r3, [r3, #7]
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b7f      	subs	r3, #127	; 0x7f
 8001092:	b29b      	uxth	r3, r3
 8001094:	b21a      	sxth	r2, r3
 8001096:	4b69      	ldr	r3, [pc, #420]	; (800123c <input_analog+0x1dc>)
 8001098:	801a      	strh	r2, [r3, #0]
		joystick_analog[1] = (127-joystick_value [8]);
 800109a:	4b66      	ldr	r3, [pc, #408]	; (8001234 <input_analog+0x1d4>)
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <input_analog+0x1dc>)
 80010aa:	805a      	strh	r2, [r3, #2]
		joystick_analog[2] = (joystick_value [5]-127);
 80010ac:	4b61      	ldr	r3, [pc, #388]	; (8001234 <input_analog+0x1d4>)
 80010ae:	795b      	ldrb	r3, [r3, #5]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b7f      	subs	r3, #127	; 0x7f
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <input_analog+0x1dc>)
 80010ba:	809a      	strh	r2, [r3, #4]
 80010bc:	e008      	b.n	80010d0 <input_analog+0x70>
	}
	else {
		joystick_analog[0] = 0;
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <input_analog+0x1dc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]
		joystick_analog[1] = 0;
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <input_analog+0x1dc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	805a      	strh	r2, [r3, #2]
		joystick_analog[2] = 0;
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <input_analog+0x1dc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	809a      	strh	r2, [r3, #4]
	}
	if(joystick_button == JSR1) {
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <input_analog+0x1d8>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010d8:	d107      	bne.n	80010ea <input_analog+0x8a>
		latch = 1;
 80010da:	4b59      	ldr	r3, [pc, #356]	; (8001240 <input_analog+0x1e0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
		rasio_speed = 0.75;
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <input_analog+0x1e4>)
 80010e2:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e00f      	b.n	800110a <input_analog+0xaa>
	}
	else if(joystick_button != JSR1 && latch == 1){
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <input_analog+0x1d8>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010f2:	d00a      	beq.n	800110a <input_analog+0xaa>
 80010f4:	4b52      	ldr	r3, [pc, #328]	; (8001240 <input_analog+0x1e0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d106      	bne.n	800110a <input_analog+0xaa>
		latch = 0;
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <input_analog+0x1e0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		rasio_speed = 0.5;
 8001102:	4b50      	ldr	r3, [pc, #320]	; (8001244 <input_analog+0x1e4>)
 8001104:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001108:	601a      	str	r2, [r3, #0]
	}

	if(joystick_button == JSSQ)mode = 0;
 800110a:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <input_analog+0x1d8>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001112:	d103      	bne.n	800111c <input_analog+0xbc>
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <input_analog+0x1e8>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <input_analog+0xcc>
	else if(joystick_button == JSCR) mode = 1;
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <input_analog+0x1d8>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001124:	d102      	bne.n	800112c <input_analog+0xcc>
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <input_analog+0x1e8>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]

	if(joystick_button == JSXX && latch_XX == 1){
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <input_analog+0x1d8>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001134:	d11a      	bne.n	800116c <input_analog+0x10c>
 8001136:	4b45      	ldr	r3, [pc, #276]	; (800124c <input_analog+0x1ec>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d116      	bne.n	800116c <input_analog+0x10c>
		latch_XX = 0;
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <input_analog+0x1ec>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
		rasio_speed += 0.01;
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <input_analog+0x1e4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9a1 	bl	8000490 <__aeabi_f2d>
 800114e:	a334      	add	r3, pc, #208	; (adr r3, 8001220 <input_analog+0x1c0>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff f83e 	bl	80001d4 <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fcb0 	bl	8000ac4 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	4a37      	ldr	r2, [pc, #220]	; (8001244 <input_analog+0x1e4>)
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <input_analog+0x124>
	}
	else if(joystick_button != JSXX && latch_XX == 0)latch_XX = 1;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <input_analog+0x1d8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001174:	d006      	beq.n	8001184 <input_analog+0x124>
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <input_analog+0x1ec>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <input_analog+0x124>
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <input_analog+0x1ec>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

	if (joystick_button == JSTR && latch_TR == 1){
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <input_analog+0x1d8>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d11a      	bne.n	80011c4 <input_analog+0x164>
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <input_analog+0x1f0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d116      	bne.n	80011c4 <input_analog+0x164>
		latch_TR = 0;
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <input_analog+0x1f0>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		rasio_speed -= 0.01;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <input_analog+0x1e4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f975 	bl	8000490 <__aeabi_f2d>
 80011a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001220 <input_analog+0x1c0>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f810 	bl	80001d0 <__aeabi_dsub>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fc84 	bl	8000ac4 <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a21      	ldr	r2, [pc, #132]	; (8001244 <input_analog+0x1e4>)
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <input_analog+0x17c>
	}
	else if (joystick_button != JSTR && latch_TR == 0)latch_TR = 1;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <input_analog+0x1d8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011cc:	d006      	beq.n	80011dc <input_analog+0x17c>
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <input_analog+0x1f0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <input_analog+0x17c>
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <input_analog+0x1f0>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

	if(rasio_speed >= 0.8) rasio_speed = 0.8;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <input_analog+0x1e4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f955 	bl	8000490 <__aeabi_f2d>
 80011e6:	a310      	add	r3, pc, #64	; (adr r3, 8001228 <input_analog+0x1c8>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff fc2e 	bl	8000a4c <__aeabi_dcmpge>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <input_analog+0x19e>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <input_analog+0x1e4>)
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <input_analog+0x1f4>)
 80011fa:	601a      	str	r2, [r3, #0]
	else if(rasio_speed <= 0) rasio_speed = 0;

}
 80011fc:	e00c      	b.n	8001218 <input_analog+0x1b8>
	else if(rasio_speed <= 0) rasio_speed = 0;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <input_analog+0x1e4>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120c:	d900      	bls.n	8001210 <input_analog+0x1b0>
}
 800120e:	e003      	b.n	8001218 <input_analog+0x1b8>
	else if(rasio_speed <= 0) rasio_speed = 0;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <input_analog+0x1e4>)
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	47ae147b 	.word	0x47ae147b
 8001224:	3f847ae1 	.word	0x3f847ae1
 8001228:	9999999a 	.word	0x9999999a
 800122c:	3fe99999 	.word	0x3fe99999
 8001230:	2000010e 	.word	0x2000010e
 8001234:	20000110 	.word	0x20000110
 8001238:	20000104 	.word	0x20000104
 800123c:	20000108 	.word	0x20000108
 8001240:	200000f8 	.word	0x200000f8
 8001244:	20000000 	.word	0x20000000
 8001248:	200000f4 	.word	0x200000f4
 800124c:	200000fc 	.word	0x200000fc
 8001250:	20000100 	.word	0x20000100
 8001254:	3f4ccccd 	.word	0x3f4ccccd

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f001 fa56 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f85e 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f7ff fe1a 	bl	8000e9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001268:	f000 fc18 	bl	8001a9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800126c:	f000 fc6a 	bl	8001b44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001270:	f000 fcbc 	bl	8001bec <MX_TIM4_Init>
  MX_TIM5_Init();
 8001274:	f000 fd0e 	bl	8001c94 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001278:	f000 fd60 	bl	8001d3c <MX_TIM6_Init>
  MX_TIM7_Init();
 800127c:	f000 fd94 	bl	8001da8 <MX_TIM7_Init>
  MX_TIM9_Init();
 8001280:	f000 fdc8 	bl	8001e14 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001284:	f000 fe0c 	bl	8001ea0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001288:	f000 fe50 	bl	8001f2c <MX_TIM13_Init>
  MX_DMA_Init();
 800128c:	f7ff fde6 	bl	8000e5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f001 f944 	bl	800251c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001294:	f000 fe98 	bl	8001fc8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  ///--------------start encoder dan timer pwm----------------
  HAL_TIM_Base_Start_IT(&htim6);
 8001298:	4815      	ldr	r0, [pc, #84]	; (80012f0 <main+0x98>)
 800129a:	f002 fe37 	bl	8003f0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800129e:	4815      	ldr	r0, [pc, #84]	; (80012f4 <main+0x9c>)
 80012a0:	f002 fe34 	bl	8003f0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80012a4:	2100      	movs	r1, #0
 80012a6:	4814      	ldr	r0, [pc, #80]	; (80012f8 <main+0xa0>)
 80012a8:	f002 fef0 	bl	800408c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	4813      	ldr	r0, [pc, #76]	; (80012fc <main+0xa4>)
 80012b0:	f002 feec 	bl	800408c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80012b4:	2100      	movs	r1, #0
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <main+0xa8>)
 80012b8:	f002 fee8 	bl	800408c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80012bc:	2104      	movs	r1, #4
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <main+0xac>)
 80012c0:	f002 fee4 	bl	800408c <HAL_TIM_PWM_Start>


  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012c4:	213c      	movs	r1, #60	; 0x3c
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <main+0xb0>)
 80012c8:	f003 f84e 	bl	8004368 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012cc:	213c      	movs	r1, #60	; 0x3c
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <main+0xb4>)
 80012d0:	f003 f84a 	bl	8004368 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80012d4:	213c      	movs	r1, #60	; 0x3c
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <main+0xb8>)
 80012d8:	f003 f846 	bl	8004368 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80012dc:	213c      	movs	r1, #60	; 0x3c
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <main+0xbc>)
 80012e0:	f003 f842 	bl	8004368 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_DMA(&huart2, joystick_value, 9);
 80012e4:	2209      	movs	r2, #9
 80012e6:	490c      	ldr	r1, [pc, #48]	; (8001318 <main+0xc0>)
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <main+0xc4>)
 80012ea:	f003 fe1a 	bl	8004f22 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <main+0x96>
 80012f0:	200002ac 	.word	0x200002ac
 80012f4:	20000414 	.word	0x20000414
 80012f8:	200003cc 	.word	0x200003cc
 80012fc:	20000264 	.word	0x20000264
 8001300:	20000384 	.word	0x20000384
 8001304:	200002f4 	.word	0x200002f4
 8001308:	2000033c 	.word	0x2000033c
 800130c:	2000021c 	.word	0x2000021c
 8001310:	2000018c 	.word	0x2000018c
 8001314:	200001d4 	.word	0x200001d4
 8001318:	20000110 	.word	0x20000110
 800131c:	200004bc 	.word	0x200004bc

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fea4 	bl	800607c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <SystemClock_Config+0xcc>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <SystemClock_Config+0xcc>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xd0>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <SystemClock_Config+0xd0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001390:	2304      	movs	r3, #4
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001394:	23a8      	movs	r3, #168	; 0xa8
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139c:	2304      	movs	r3, #4
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f8ed 	bl	8003584 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013b0:	f000 f820 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2105      	movs	r1, #5
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fb4e 	bl	8003a74 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013de:	f000 f809 	bl	80013f4 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	; 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <invers_kinematik>:
                    {cosf(45.0*rad), sinf(45.0*rad), -1},
                    {cosf(135.0*rad), sinf(135.0*rad), -1},
                    {cosf(225.0*rad), sinf(225.0*rad), -1},
                    {cosf(315.0*rad), sinf(315.0*rad), -1}};

void invers_kinematik(int16_t base_speed[3], int mode){
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	ed2d 8b02 	vpush	{d8}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	if (mode == 1){//bu;at
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	f040 809b 	bne.w	800154c <invers_kinematik+0x14c>
		koordinat_bulat[0] = (base_speed[0] * sqrtf(1 - 0.5 * powf(base_speed[1]/128.0,2)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3302      	adds	r3, #2
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f81d 	bl	800046c <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b84      	ldr	r3, [pc, #528]	; (8001648 <invers_kinematik+0x248>)
 8001438:	f7ff f9ac 	bl	8000794 <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb3e 	bl	8000ac4 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800144e:	ee00 3a10 	vmov	s0, r3
 8001452:	f004 fe1b 	bl	800608c <powf>
 8001456:	ee10 3a10 	vmov	r3, s0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f818 	bl	8000490 <__aeabi_f2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b79      	ldr	r3, [pc, #484]	; (800164c <invers_kinematik+0x24c>)
 8001466:	f7ff f86b 	bl	8000540 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	f04f 0000 	mov.w	r0, #0
 8001472:	4977      	ldr	r1, [pc, #476]	; (8001650 <invers_kinematik+0x250>)
 8001474:	f7fe feac 	bl	80001d0 <__aeabi_dsub>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb20 	bl	8000ac4 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	ee00 3a10 	vmov	s0, r3
 800148a:	f004 fe97 	bl	80061bc <sqrtf>
 800148e:	eef0 7a40 	vmov.f32	s15, s0
 8001492:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <invers_kinematik+0x254>)
 8001498:	edc3 7a00 	vstr	s15, [r3]
		koordinat_bulat[1] = (base_speed[1] * sqrtf(1 - 0.5 * powf(base_speed[0]/128.0,2)));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3302      	adds	r3, #2
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffda 	bl	800046c <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b62      	ldr	r3, [pc, #392]	; (8001648 <invers_kinematik+0x248>)
 80014be:	f7ff f969 	bl	8000794 <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fafb 	bl	8000ac4 <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014d4:	ee00 3a10 	vmov	s0, r3
 80014d8:	f004 fdd8 	bl	800608c <powf>
 80014dc:	ee10 3a10 	vmov	r3, s0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffd5 	bl	8000490 <__aeabi_f2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <invers_kinematik+0x24c>)
 80014ec:	f7ff f828 	bl	8000540 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	4955      	ldr	r1, [pc, #340]	; (8001650 <invers_kinematik+0x250>)
 80014fa:	f7fe fe69 	bl	80001d0 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fadd 	bl	8000ac4 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	ee00 3a10 	vmov	s0, r3
 8001510:	f004 fe54 	bl	80061bc <sqrtf>
 8001514:	eef0 7a40 	vmov.f32	s15, s0
 8001518:	ee68 7a27 	vmul.f32	s15, s16, s15
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <invers_kinematik+0x254>)
 800151e:	edc3 7a01 	vstr	s15, [r3, #4]

		base_speed[0] = koordinat_bulat[0];
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <invers_kinematik+0x254>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	801a      	strh	r2, [r3, #0]
		base_speed[1] = koordinat_bulat[1];
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <invers_kinematik+0x254>)
 8001538:	edd3 7a01 	vldr	s15, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3302      	adds	r3, #2
 8001540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001544:	ee17 2a90 	vmov	r2, s15
 8001548:	b212      	sxth	r2, r2
 800154a:	801a      	strh	r2, [r3, #0]
	}
	for(int i=0; i<4 ;i++){
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e06b      	b.n	800162a <invers_kinematik+0x22a>
		target_speed[i] = rasio_speed * (matrix[i][0] * base_speed[0] + matrix[i][1] * base_speed[1]) * 0.25 + matrix[i][2] * base_speed [2] * 0.1;
 8001552:	4941      	ldr	r1, [pc, #260]	; (8001658 <invers_kinematik+0x258>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001576:	4938      	ldr	r1, [pc, #224]	; (8001658 <invers_kinematik+0x258>)
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3302      	adds	r3, #2
 800158e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <invers_kinematik+0x25c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ff6e 	bl	8000490 <__aeabi_f2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <invers_kinematik+0x260>)
 80015ba:	f7fe ffc1 	bl	8000540 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4614      	mov	r4, r2
 80015c4:	461d      	mov	r5, r3
 80015c6:	4924      	ldr	r1, [pc, #144]	; (8001658 <invers_kinematik+0x258>)
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3308      	adds	r3, #8
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	ee17 0a90 	vmov	r0, s15
 80015f2:	f7fe ff4d 	bl	8000490 <__aeabi_f2d>
 80015f6:	a312      	add	r3, pc, #72	; (adr r3, 8001640 <invers_kinematik+0x240>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7fe ffa0 	bl	8000540 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fde4 	bl	80001d4 <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa2e 	bl	8000a74 <__aeabi_d2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	b219      	sxth	r1, r3
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <invers_kinematik+0x264>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<4 ;i++){
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b03      	cmp	r3, #3
 800162e:	dd90      	ble.n	8001552 <invers_kinematik+0x152>
	}

}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	ecbd 8b02 	vpop	{d8}
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fb99999 	.word	0x3fb99999
 8001648:	40600000 	.word	0x40600000
 800164c:	3fe00000 	.word	0x3fe00000
 8001650:	3ff00000 	.word	0x3ff00000
 8001654:	2000014c 	.word	0x2000014c
 8001658:	20000034 	.word	0x20000034
 800165c:	20000000 	.word	0x20000000
 8001660:	3fd00000 	.word	0x3fd00000
 8001664:	2000017c 	.word	0x2000017c

08001668 <kontrol_base>:

void kontrol_base(){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	enc_speed[0] = -TIM5->CNT;
 800166e:	4bab      	ldr	r3, [pc, #684]	; (800191c <kontrol_base+0x2b4>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	b29b      	uxth	r3, r3
 8001674:	425b      	negs	r3, r3
 8001676:	b29b      	uxth	r3, r3
 8001678:	b21a      	sxth	r2, r3
 800167a:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <kontrol_base+0x2b8>)
 800167c:	801a      	strh	r2, [r3, #0]
	enc_speed[1] = TIM4->CNT;
 800167e:	4ba9      	ldr	r3, [pc, #676]	; (8001924 <kontrol_base+0x2bc>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	b21a      	sxth	r2, r3
 8001684:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <kontrol_base+0x2b8>)
 8001686:	805a      	strh	r2, [r3, #2]
	enc_speed[2] = TIM3->CNT;
 8001688:	4ba7      	ldr	r3, [pc, #668]	; (8001928 <kontrol_base+0x2c0>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	b21a      	sxth	r2, r3
 800168e:	4ba4      	ldr	r3, [pc, #656]	; (8001920 <kontrol_base+0x2b8>)
 8001690:	809a      	strh	r2, [r3, #4]
	enc_speed[3] = -TIM2->CNT;
 8001692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	b29b      	uxth	r3, r3
 800169a:	425b      	negs	r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b9f      	ldr	r3, [pc, #636]	; (8001920 <kontrol_base+0x2b8>)
 80016a2:	80da      	strh	r2, [r3, #6]

	TIM5->CNT = 0;
 80016a4:	4b9d      	ldr	r3, [pc, #628]	; (800191c <kontrol_base+0x2b4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 80016aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 80016b2:	4b9d      	ldr	r3, [pc, #628]	; (8001928 <kontrol_base+0x2c0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 80016b8:	4b9a      	ldr	r3, [pc, #616]	; (8001924 <kontrol_base+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
//	target_speed[0] = resultan_vektor * cosf(315.0f * M_PI/180.0f - sudut_resultan) *faktor_pengali + base_speed[2];
//	target_speed[1] = resultan_vektor * cosf(45.0f * M_PI/180.0f - sudut_resultan) * faktor_pengali + base_speed[2];
//	target_speed[2] = resultan_vektor * cosf(135.0f * M_PI/180.0f - sudut_resultan) * faktor_pengali + base_speed[2];
//	target_speed[3] = resultan_vektor * cosf(225.0f * M_PI/180.0f - sudut_resultan) * faktor_pengali + base_speed[2];
//
	for(int i=0; i<4 ; i++){
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e0b3      	b.n	800182c <kontrol_base+0x1c4>
		error_speed[i] = target_speed[i] - enc_speed[i];
 80016c4:	4a99      	ldr	r2, [pc, #612]	; (800192c <kontrol_base+0x2c4>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4994      	ldr	r1, [pc, #592]	; (8001920 <kontrol_base+0x2b8>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b219      	sxth	r1, r3
 80016de:	4a94      	ldr	r2, [pc, #592]	; (8001930 <kontrol_base+0x2c8>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if((j[i] > 0 && target_speed[i] <= 0) || (j[i] < 0 && target_speed[i] >= 0))j[i]=0;
 80016e6:	4a93      	ldr	r2, [pc, #588]	; (8001934 <kontrol_base+0x2cc>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	dd05      	ble.n	8001708 <kontrol_base+0xa0>
 80016fc:	4a8b      	ldr	r2, [pc, #556]	; (800192c <kontrol_base+0x2c4>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001704:	2b00      	cmp	r3, #0
 8001706:	dd10      	ble.n	800172a <kontrol_base+0xc2>
 8001708:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <kontrol_base+0x2cc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d50c      	bpl.n	8001738 <kontrol_base+0xd0>
 800171e:	4a83      	ldr	r2, [pc, #524]	; (800192c <kontrol_base+0x2c4>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db06      	blt.n	8001738 <kontrol_base+0xd0>
 800172a:	4a82      	ldr	r2, [pc, #520]	; (8001934 <kontrol_base+0x2cc>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
		p[i] = (float)(error_speed[i] * kpid[i][0]);
 8001738:	4a7d      	ldr	r2, [pc, #500]	; (8001930 <kontrol_base+0x2c8>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	497b      	ldr	r1, [pc, #492]	; (8001938 <kontrol_base+0x2d0>)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <kontrol_base+0x2d4>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	edc3 7a00 	vstr	s15, [r3]
		j[i] += (float)(error_speed[i] * kpid[i][1]);
 800176a:	4a72      	ldr	r2, [pc, #456]	; (8001934 <kontrol_base+0x2cc>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <kontrol_base+0x2c8>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001786:	496c      	ldr	r1, [pc, #432]	; (8001938 <kontrol_base+0x2d0>)
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	3304      	adds	r3, #4
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	4a64      	ldr	r2, [pc, #400]	; (8001934 <kontrol_base+0x2cc>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	edc3 7a00 	vstr	s15, [r3]
		pid[i] = (int16_t)(p[i]+j[i]);
 80017ae:	4a63      	ldr	r2, [pc, #396]	; (800193c <kontrol_base+0x2d4>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <kontrol_base+0x2cc>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ce:	ee17 3a90 	vmov	r3, s15
 80017d2:	b219      	sxth	r1, r3
 80017d4:	4a5a      	ldr	r2, [pc, #360]	; (8001940 <kontrol_base+0x2d8>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(pid[i]>=499)pwm[i] = 499;
 80017dc:	4a58      	ldr	r2, [pc, #352]	; (8001940 <kontrol_base+0x2d8>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017e4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80017e8:	dd06      	ble.n	80017f8 <kontrol_base+0x190>
 80017ea:	4a56      	ldr	r2, [pc, #344]	; (8001944 <kontrol_base+0x2dc>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f240 11f3 	movw	r1, #499	; 0x1f3
 80017f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80017f6:	e016      	b.n	8001826 <kontrol_base+0x1be>
		else if(pid[i]<=-499)pwm[i] = -499;
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <kontrol_base+0x2d8>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001800:	f513 7ff9 	cmn.w	r3, #498	; 0x1f2
 8001804:	da06      	bge.n	8001814 <kontrol_base+0x1ac>
 8001806:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <kontrol_base+0x2dc>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f46f 71f9 	mvn.w	r1, #498	; 0x1f2
 800180e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001812:	e008      	b.n	8001826 <kontrol_base+0x1be>
		else pwm[i] = pid[i];
 8001814:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <kontrol_base+0x2d8>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800181c:	4619      	mov	r1, r3
 800181e:	4a49      	ldr	r2, [pc, #292]	; (8001944 <kontrol_base+0x2dc>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<4 ; i++){
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b03      	cmp	r3, #3
 8001830:	f77f af48 	ble.w	80016c4 <kontrol_base+0x5c>
	}

	HAL_GPIO_WritePin(dir_0A_GPIO_Port, dir_0A_Pin, pwm[0] < 0 ? 0 : 1);
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <kontrol_base+0x2dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	43db      	mvns	r3, r3
 800183a:	0fdb      	lsrs	r3, r3, #31
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001844:	4840      	ldr	r0, [pc, #256]	; (8001948 <kontrol_base+0x2e0>)
 8001846:	f001 fe83 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dir_0B_GPIO_Port, dir_0B_Pin, pwm[0] < 0 ? 1 : 0);
 800184a:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <kontrol_base+0x2dc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0fdb      	lsrs	r3, r3, #31
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001858:	483c      	ldr	r0, [pc, #240]	; (800194c <kontrol_base+0x2e4>)
 800185a:	f001 fe79 	bl	8003550 <HAL_GPIO_WritePin>
	TIM12->CCR1	 = abs(pwm[0]);
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <kontrol_base+0x2dc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001866:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <kontrol_base+0x2e8>)
 800186c:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(dir_1A_GPIO_Port, dir_1A_Pin, pwm[1] < 0 ? 1 : 0);
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <kontrol_base+0x2dc>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0fdb      	lsrs	r3, r3, #31
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	2101      	movs	r1, #1
 800187a:	4833      	ldr	r0, [pc, #204]	; (8001948 <kontrol_base+0x2e0>)
 800187c:	f001 fe68 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dir_1B_GPIO_Port, dir_1B_Pin, pwm[1] < 0 ? 0 : 1);
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <kontrol_base+0x2dc>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	43db      	mvns	r3, r3
 8001886:	0fdb      	lsrs	r3, r3, #31
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	2102      	movs	r1, #2
 800188e:	482e      	ldr	r0, [pc, #184]	; (8001948 <kontrol_base+0x2e0>)
 8001890:	f001 fe5e 	bl	8003550 <HAL_GPIO_WritePin>
	TIM13->CCR1	 = abs(pwm[1]);
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <kontrol_base+0x2dc>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800189c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <kontrol_base+0x2ec>)
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(dir_2A_GPIO_Port, dir_2A_Pin, pwm[2] < 0 ? 0 : 1);
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <kontrol_base+0x2dc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	0fdb      	lsrs	r3, r3, #31
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	2120      	movs	r1, #32
 80018b2:	4829      	ldr	r0, [pc, #164]	; (8001958 <kontrol_base+0x2f0>)
 80018b4:	f001 fe4c 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dir_2B_GPIO_Port, dir_2B_Pin, pwm[2] < 0 ? 1 : 0);
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <kontrol_base+0x2dc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0fdb      	lsrs	r3, r3, #31
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	4825      	ldr	r0, [pc, #148]	; (800195c <kontrol_base+0x2f4>)
 80018c8:	f001 fe42 	bl	8003550 <HAL_GPIO_WritePin>
	TIM14->CCR1	 = abs(pwm[2]);
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <kontrol_base+0x2dc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018d4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <kontrol_base+0x2f8>)
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_WritePin(dir_3A_GPIO_Port, dir_3A_Pin, pwm[3] < 0 ? 0 : 1);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <kontrol_base+0x2dc>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	0fdb      	lsrs	r3, r3, #31
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	4818      	ldr	r0, [pc, #96]	; (800194c <kontrol_base+0x2e4>)
 80018ec:	f001 fe30 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(dir_3B_GPIO_Port, dir_3B_Pin, pwm[3] < 0 ? 1 : 0);
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <kontrol_base+0x2dc>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0fdb      	lsrs	r3, r3, #31
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	2104      	movs	r1, #4
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <kontrol_base+0x2e0>)
 80018fe:	f001 fe27 	bl	8003550 <HAL_GPIO_WritePin>
	TIM9->CCR2	 = abs(pwm[3]);
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <kontrol_base+0x2dc>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800190a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <kontrol_base+0x2fc>)
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000c00 	.word	0x40000c00
 8001920:	20000184 	.word	0x20000184
 8001924:	40000800 	.word	0x40000800
 8001928:	40000400 	.word	0x40000400
 800192c:	2000017c 	.word	0x2000017c
 8001930:	20000154 	.word	0x20000154
 8001934:	2000012c 	.word	0x2000012c
 8001938:	20000004 	.word	0x20000004
 800193c:	2000011c 	.word	0x2000011c
 8001940:	2000013c 	.word	0x2000013c
 8001944:	2000016c 	.word	0x2000016c
 8001948:	40020400 	.word	0x40020400
 800194c:	40021000 	.word	0x40021000
 8001950:	40001800 	.word	0x40001800
 8001954:	40001c00 	.word	0x40001c00
 8001958:	40020000 	.word	0x40020000
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40002000 	.word	0x40002000
 8001964:	40014000 	.word	0x40014000

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 fed4 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Stream5_IRQHandler+0x10>)
 8001a12:	f001 f997 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000045c 	.word	0x2000045c

08001a20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USART2_IRQHandler+0x10>)
 8001a26:	f003 fb2b 	bl	8005080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200004bc 	.word	0x200004bc

08001a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <TIM6_DAC_IRQHandler+0x24>)
 8001a3a:	f002 fd23 	bl	8004484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  input_analog();
 8001a3e:	f7ff fb0f 	bl	8001060 <input_analog>
  invers_kinematik(joystick_analog,mode);
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <TIM6_DAC_IRQHandler+0x28>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <TIM6_DAC_IRQHandler+0x2c>)
 8001a4a:	f7ff fcd9 	bl	8001400 <invers_kinematik>
  kontrol_base();
 8001a4e:	f7ff fe0b 	bl	8001668 <kontrol_base>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002ac 	.word	0x200002ac
 8001a5c:	200000f4 	.word	0x200000f4
 8001a60:	20000108 	.word	0x20000108

08001a64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM7_IRQHandler+0x10>)
 8001a6a:	f002 fd0b 	bl	8004484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000414 	.word	0x20000414

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fae6 	bl	800607c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001b0c:	f002 fb86 	bl	800421c <HAL_TIM_Encoder_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b16:	f7ff fc6d 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_TIM2_Init+0xa4>)
 8001b28:	f003 f91e 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b32:	f7ff fc5f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3730      	adds	r7, #48	; 0x30
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000033c 	.word	0x2000033c

08001b44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fa92 	bl	800607c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <MX_TIM3_Init+0xa4>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001bb2:	f002 fb33 	bl	800421c <HAL_TIM_Encoder_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bbc:	f7ff fc1a 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_TIM3_Init+0xa0>)
 8001bce:	f003 f8cb 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bd8:	f7ff fc0c 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000021c 	.word	0x2000021c
 8001be8:	40000400 	.word	0x40000400

08001bec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fa3e 	bl	800607c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c0a:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MX_TIM4_Init+0xa4>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c46:	2301      	movs	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c5a:	f002 fadf 	bl	800421c <HAL_TIM_Encoder_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f7ff fbc6 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_TIM4_Init+0xa0>)
 8001c76:	f003 f877 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c80:	f7ff fbb8 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000018c 	.word	0x2000018c
 8001c90:	40000800 	.word	0x40000800

08001c94 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f9ea 	bl	800607c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001cb2:	4a21      	ldr	r2, [pc, #132]	; (8001d38 <MX_TIM5_Init+0xa4>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001d02:	f002 fa8b 	bl	800421c <HAL_TIM_Encoder_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f7ff fb72 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM5_Init+0xa0>)
 8001d1e:	f003 f823 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001d28:	f7ff fb64 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200001d4 	.word	0x200001d4
 8001d38:	40000c00 	.word	0x40000c00

08001d3c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d4c:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <MX_TIM6_Init+0x68>)
 8001d4e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d52:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d6e:	f002 f87d 	bl	8003e6c <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d78:	f7ff fb3c 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_TIM6_Init+0x64>)
 8001d8a:	f002 ffed 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d94:	f7ff fb2e 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200002ac 	.word	0x200002ac
 8001da4:	40001000 	.word	0x40001000

08001da8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <MX_TIM7_Init+0x68>)
 8001dba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001dbe:	2253      	movs	r2, #83	; 0x53
 8001dc0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001dca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001dd8:	f002 f848 	bl	8003e6c <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001de2:	f7ff fb07 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM7_Init+0x64>)
 8001df4:	f002 ffb8 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001dfe:	f7ff faf9 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000414 	.word	0x20000414
 8001e10:	40001400 	.word	0x40001400

08001e14 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]
 8001e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <MX_TIM9_Init+0x88>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 33;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e34:	2221      	movs	r2, #33	; 0x21
 8001e36:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 499;
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e40:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e44:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e54:	f002 f8ca 	bl	8003fec <HAL_TIM_PWM_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001e5e:	f7ff fac9 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2360      	movs	r3, #96	; 0x60
 8001e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2204      	movs	r2, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e7a:	f002 fc0b 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001e84:	f7ff fab6 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM9_Init+0x84>)
 8001e8a:	f000 fa97 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200002f4 	.word	0x200002f4
 8001e9c:	40014000 	.word	0x40014000

08001ea0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <MX_TIM12_Init+0x88>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 16;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 499;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001ecc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ed0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ede:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001ee0:	f002 f884 	bl	8003fec <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001eea:	f7ff fa83 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eee:	2360      	movs	r3, #96	; 0x60
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001f06:	f002 fbc5 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001f10:	f7ff fa70 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM12_Init+0x84>)
 8001f16:	f000 fa51 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3720      	adds	r7, #32
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003cc 	.word	0x200003cc
 8001f28:	40001800 	.word	0x40001800

08001f2c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	615a      	str	r2, [r3, #20]
 8001f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <MX_TIM13_Init+0x98>)
 8001f48:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 499;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f58:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001f5c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f6c:	f001 ff7e 	bl	8003e6c <HAL_TIM_Base_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001f76:	f7ff fa3d 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001f7c:	f002 f836 	bl	8003fec <HAL_TIM_PWM_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001f86:	f7ff fa35 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	; 0x60
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001fa2:	f002 fb77 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001fac:	f7ff fa22 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM13_Init+0x94>)
 8001fb2:	f000 fa03 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000264 	.word	0x20000264
 8001fc4:	40001c00 	.word	0x40001c00

08001fc8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <MX_TIM14_Init+0x94>)
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <MX_TIM14_Init+0x98>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_TIM14_Init+0x94>)
 8001fe8:	2210      	movs	r2, #16
 8001fea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_TIM14_Init+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_TIM14_Init+0x94>)
 8001ff4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ff8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_TIM14_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_TIM14_Init+0x94>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002006:	4815      	ldr	r0, [pc, #84]	; (800205c <MX_TIM14_Init+0x94>)
 8002008:	f001 ff30 	bl	8003e6c <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002012:	f7ff f9ef 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <MX_TIM14_Init+0x94>)
 8002018:	f001 ffe8 	bl	8003fec <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002022:	f7ff f9e7 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002026:	2360      	movs	r3, #96	; 0x60
 8002028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_TIM14_Init+0x94>)
 800203e:	f002 fb29 	bl	8004694 <HAL_TIM_PWM_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002048:	f7ff f9d4 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <MX_TIM14_Init+0x94>)
 800204e:	f000 f9b5 	bl	80023bc <HAL_TIM_MspPostInit>

}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000384 	.word	0x20000384
 8002060:	40002000 	.word	0x40002000

08002064 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b090      	sub	sp, #64	; 0x40
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d14b      	bne.n	800211e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
 800208a:	4b71      	ldr	r3, [pc, #452]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a70      	ldr	r2, [pc, #448]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a69      	ldr	r2, [pc, #420]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a62      	ldr	r2, [pc, #392]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = enc_3A_Pin;
 80020da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ec:	2301      	movs	r3, #1
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(enc_3A_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f4:	4619      	mov	r1, r3
 80020f6:	4857      	ldr	r0, [pc, #348]	; (8002254 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80020f8:	f001 f88e 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = enc_3B_Pin;
 80020fc:	2308      	movs	r3, #8
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210c:	2301      	movs	r3, #1
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(enc_3B_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002114:	4619      	mov	r1, r3
 8002116:	4850      	ldr	r0, [pc, #320]	; (8002258 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002118:	f001 f87e 	bl	8003218 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800211c:	e094      	b.n	8002248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4e      	ldr	r2, [pc, #312]	; (800225c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d12c      	bne.n	8002182 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a47      	ldr	r2, [pc, #284]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a40      	ldr	r2, [pc, #256]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	6313      	str	r3, [r2, #48]	; 0x30
 8002154:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = enc_2A_Pin|enc_2B_Pin;
 8002160:	2330      	movs	r3, #48	; 0x30
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002170:	2302      	movs	r3, #2
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	4837      	ldr	r0, [pc, #220]	; (8002258 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800217c:	f001 f84c 	bl	8003218 <HAL_GPIO_Init>
}
 8002180:	e062      	b.n	8002248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a36      	ldr	r2, [pc, #216]	; (8002260 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d12c      	bne.n	80021e6 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = enc_1A_Pin|enc_1B_Pin;
 80021c4:	23c0      	movs	r3, #192	; 0xc0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021d4:	2302      	movs	r3, #2
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021dc:	4619      	mov	r1, r3
 80021de:	481e      	ldr	r0, [pc, #120]	; (8002258 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80021e0:	f001 f81a 	bl	8003218 <HAL_GPIO_Init>
}
 80021e4:	e030      	b.n	8002248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <HAL_TIM_Encoder_MspInit+0x200>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d12b      	bne.n	8002248 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6313      	str	r3, [r2, #48]	; 0x30
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = enc_0A_Pin|enc_0B_Pin;
 8002228:	2303      	movs	r3, #3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002238:	2302      	movs	r3, #2
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002240:	4619      	mov	r1, r3
 8002242:	4804      	ldr	r0, [pc, #16]	; (8002254 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002244:	f000 ffe8 	bl	8003218 <HAL_GPIO_Init>
}
 8002248:	bf00      	nop
 800224a:	3740      	adds	r7, #64	; 0x40
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00

08002268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_TIM_Base_MspInit+0xd0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d116      	bne.n	80022a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 8002284:	f043 0310 	orr.w	r3, r3, #16
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2036      	movs	r0, #54	; 0x36
 800229c:	f000 fb83 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a0:	2036      	movs	r0, #54	; 0x36
 80022a2:	f000 fb9c 	bl	80029de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80022a6:	e042      	b.n	800232e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_TIM_Base_MspInit+0xd8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d116      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022bc:	f043 0320 	orr.w	r3, r3, #32
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2100      	movs	r1, #0
 80022d2:	2037      	movs	r0, #55	; 0x37
 80022d4:	f000 fb67 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022d8:	2037      	movs	r0, #55	; 0x37
 80022da:	f000 fb80 	bl	80029de <HAL_NVIC_EnableIRQ>
}
 80022de:	e026      	b.n	800232e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM13)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_TIM_Base_MspInit+0xdc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10e      	bne.n	8002308 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
}
 8002306:	e012      	b.n	800232e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_TIM_Base_MspInit+0xe0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10d      	bne.n	800232e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_TIM_Base_MspInit+0xd4>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40001000 	.word	0x40001000
 800233c:	40023800 	.word	0x40023800
 8002340:	40001400 	.word	0x40001400
 8002344:	40001c00 	.word	0x40001c00
 8002348:	40002000 	.word	0x40002000

0800234c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <HAL_TIM_PWM_MspInit+0x64>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10e      	bne.n	800237c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800237a:	e012      	b.n	80023a2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_TIM_PWM_MspInit+0x6c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10d      	bne.n	80023a2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_TIM_PWM_MspInit+0x68>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40014000 	.word	0x40014000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40001800 	.word	0x40001800

080023bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_TIM_MspPostInit+0x140>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d11e      	bne.n	800241c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a46      	ldr	r2, [pc, #280]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80023e8:	f043 0310 	orr.w	r3, r3, #16
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM9 GPIO Configuration
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = pwm_3_Pin;
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800240a:	2303      	movs	r3, #3
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pwm_3_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	4619      	mov	r1, r3
 8002414:	483b      	ldr	r0, [pc, #236]	; (8002504 <HAL_TIM_MspPostInit+0x148>)
 8002416:	f000 feff 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800241a:	e06b      	b.n	80024f4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM12)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a39      	ldr	r2, [pc, #228]	; (8002508 <HAL_TIM_MspPostInit+0x14c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11f      	bne.n	8002466 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a34      	ldr	r2, [pc, #208]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = pwm_0_Pin;
 8002442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002454:	2309      	movs	r3, #9
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pwm_0_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	4619      	mov	r1, r3
 800245e:	482b      	ldr	r0, [pc, #172]	; (800250c <HAL_TIM_MspPostInit+0x150>)
 8002460:	f000 feda 	bl	8003218 <HAL_GPIO_Init>
}
 8002464:	e046      	b.n	80024f4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM13)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a29      	ldr	r2, [pc, #164]	; (8002510 <HAL_TIM_MspPostInit+0x154>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d11e      	bne.n	80024ae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a21      	ldr	r2, [pc, #132]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = pwm_1_Pin;
 800248c:	2340      	movs	r3, #64	; 0x40
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800249c:	2309      	movs	r3, #9
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pwm_1_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	481b      	ldr	r0, [pc, #108]	; (8002514 <HAL_TIM_MspPostInit+0x158>)
 80024a8:	f000 feb6 	bl	8003218 <HAL_GPIO_Init>
}
 80024ac:	e022      	b.n	80024f4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM14)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_TIM_MspPostInit+0x15c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d11d      	bne.n	80024f4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6313      	str	r3, [r2, #48]	; 0x30
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_TIM_MspPostInit+0x144>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm_2_Pin;
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80024e4:	2309      	movs	r3, #9
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(pwm_2_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <HAL_TIM_MspPostInit+0x158>)
 80024f0:	f000 fe92 	bl	8003218 <HAL_GPIO_Init>
}
 80024f4:	bf00      	nop
 80024f6:	3730      	adds	r7, #48	; 0x30
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40014000 	.word	0x40014000
 8002500:	40023800 	.word	0x40023800
 8002504:	40021000 	.word	0x40021000
 8002508:	40001800 	.word	0x40001800
 800250c:	40020400 	.word	0x40020400
 8002510:	40001c00 	.word	0x40001c00
 8002514:	40020000 	.word	0x40020000
 8002518:	40002000 	.word	0x40002000

0800251c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <MX_USART2_UART_Init+0x50>)
 8002524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_USART2_UART_Init+0x4c>)
 8002554:	f002 fc98 	bl	8004e88 <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800255e:	f7fe ff49 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200004bc 	.word	0x200004bc
 800256c:	40004400 	.word	0x40004400

08002570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <HAL_UART_MspInit+0x130>)
 800258e:	4293      	cmp	r3, r2
 8002590:	f040 8081 	bne.w	8002696 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_UART_MspInit+0x134>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <HAL_UART_MspInit+0x134>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6313      	str	r3, [r2, #48]	; 0x30
 80025c0:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	6313      	str	r3, [r2, #48]	; 0x30
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_UART_MspInit+0x134>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = stick_RX_Pin;
 80025e8:	2308      	movs	r3, #8
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025f8:	2307      	movs	r3, #7
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(stick_RX_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4829      	ldr	r0, [pc, #164]	; (80026a8 <HAL_UART_MspInit+0x138>)
 8002604:	f000 fe08 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = stick_TX_Pin;
 8002608:	2320      	movs	r3, #32
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002618:	2307      	movs	r3, #7
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(stick_TX_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	4822      	ldr	r0, [pc, #136]	; (80026ac <HAL_UART_MspInit+0x13c>)
 8002624:	f000 fdf8 	bl	8003218 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_UART_MspInit+0x140>)
 800262a:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <HAL_UART_MspInit+0x144>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002634:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_UART_MspInit+0x140>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002648:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_UART_MspInit+0x140>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800266a:	4811      	ldr	r0, [pc, #68]	; (80026b0 <HAL_UART_MspInit+0x140>)
 800266c:	f000 f9d2 	bl	8002a14 <HAL_DMA_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002676:	f7fe febd 	bl	80013f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_UART_MspInit+0x140>)
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_UART_MspInit+0x140>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2026      	movs	r0, #38	; 0x26
 800268c:	f000 f98b 	bl	80029a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002690:	2026      	movs	r0, #38	; 0x26
 8002692:	f000 f9a4 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40004400 	.word	0x40004400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	2000045c 	.word	0x2000045c
 80026b4:	40026088 	.word	0x40026088

080026b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026be:	490e      	ldr	r1, [pc, #56]	; (80026f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d4:	4c0b      	ldr	r4, [pc, #44]	; (8002704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026e2:	f7ff f9c9 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e6:	f003 fca5 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ea:	f7fe fdb5 	bl	8001258 <main>
  bx  lr    
 80026ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80026fc:	080069cc 	.word	0x080069cc
  ldr r2, =_sbss
 8002700:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002704:	20000504 	.word	0x20000504

08002708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC_IRQHandler>
	...

0800270c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_Init+0x40>)
 8002716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_Init+0x40>)
 8002722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_Init+0x40>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f000 f92b 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	200f      	movs	r0, #15
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7ff f912 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f943 	bl	80029fa <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800278c:	f000 f90b 	bl	80029a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000064 	.word	0x20000064
 80027a8:	2000006c 	.word	0x2000006c
 80027ac:	20000068 	.word	0x20000068

080027b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x20>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x24>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_IncTick+0x24>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	2000006c 	.word	0x2000006c
 80027d4:	20000500 	.word	0x20000500

080027d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return uwTick;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_GetTick+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000500 	.word	0x20000500

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002970:	f7ff ff8e 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff29 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff3e 	bl	8002838 <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff8e 	bl	80028e4 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff31 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa2 	bl	800294c <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff feda 	bl	80027d8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e099      	b.n	8002b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a50:	e00f      	b.n	8002a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a52:	f7ff fec1 	bl	80027d8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d908      	bls.n	8002a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e078      	b.n	8002b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e8      	bne.n	8002a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_DMA_Init+0x158>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0307 	bic.w	r3, r3, #7
 8002af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d117      	bne.n	8002b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fb01 	bl	8003120 <DMA_CheckFifoParam>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b32:	2301      	movs	r3, #1
 8002b34:	e016      	b.n	8002b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fab8 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002b44:	4603      	mov	r3, r0
 8002b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	223f      	movs	r2, #63	; 0x3f
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	f010803f 	.word	0xf010803f

08002b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Start_IT+0x26>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e040      	b.n	8002c18 <HAL_DMA_Start_IT+0xa8>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d12f      	bne.n	8002c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa4a 	bl	8003058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0216 	orr.w	r2, r2, #22
 8002bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e005      	b.n	8002c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
 8002c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c2e:	f7ff fdd3 	bl	80027d8 <HAL_GetTick>
 8002c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d008      	beq.n	8002c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e052      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_Abort+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	e013      	b.n	8002ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca4:	f7ff fd98 	bl	80027d8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d90c      	bls.n	8002ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e015      	b.n	8002cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e4      	bne.n	8002ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00c      	b.n	8002d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2205      	movs	r2, #5
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d50:	4b92      	ldr	r3, [pc, #584]	; (8002f9c <HAL_DMA_IRQHandler+0x258>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a92      	ldr	r2, [pc, #584]	; (8002fa0 <HAL_DMA_IRQHandler+0x25c>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0a9b      	lsrs	r3, r3, #10
 8002d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2208      	movs	r2, #8
 8002d70:	409a      	lsls	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0201 	orr.w	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2204      	movs	r2, #4
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2204      	movs	r2, #4
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	2210      	movs	r2, #16
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d043      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03c      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2210      	movs	r2, #16
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d108      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
 8002e72:	e01f      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e016      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0208 	bic.w	r2, r2, #8
 8002ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2220      	movs	r2, #32
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 808e 	beq.w	8002fe2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8086 	beq.w	8002fe2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	2220      	movs	r2, #32
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d136      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0216 	bic.w	r2, r2, #22
 8002efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x1da>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0208 	bic.w	r2, r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	223f      	movs	r2, #63	; 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d07d      	beq.n	800304e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
        }
        return;
 8002f5a:	e078      	b.n	800304e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01c      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d108      	bne.n	8002f8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d030      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e02b      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
 8002f9a:	e022      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x29e>
 8002f9c:	20000064 	.word	0x20000064
 8002fa0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0210 	bic.w	r2, r2, #16
 8002fc0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d032      	beq.n	8003050 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d022      	beq.n	800303c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2205      	movs	r2, #5
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	429a      	cmp	r2, r3
 8003018:	d307      	bcc.n	800302a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f2      	bne.n	800300e <HAL_DMA_IRQHandler+0x2ca>
 8003028:	e000      	b.n	800302c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800302a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e000      	b.n	8003050 <HAL_DMA_IRQHandler+0x30c>
        return;
 800304e:	bf00      	nop
    }
  }
}
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop

08003058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d108      	bne.n	8003098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003096:	e007      	b.n	80030a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3b10      	subs	r3, #16
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <DMA_CalcBaseAndBitshift+0x64>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <DMA_CalcBaseAndBitshift+0x68>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d909      	bls.n	80030f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	e007      	b.n	8003106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	08006990 	.word	0x08006990

08003120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0x5a>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d856      	bhi.n	80031ee <DMA_CheckFifoParam+0xce>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <DMA_CheckFifoParam+0x28>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800316b 	.word	0x0800316b
 8003150:	08003159 	.word	0x08003159
 8003154:	080031ef 	.word	0x080031ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e043      	b.n	80031f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003172:	d140      	bne.n	80031f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003178:	e03d      	b.n	80031f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d121      	bne.n	80031c8 <DMA_CheckFifoParam+0xa8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d837      	bhi.n	80031fa <DMA_CheckFifoParam+0xda>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x70>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031a7 	.word	0x080031a7
 8003198:	080031a1 	.word	0x080031a1
 800319c:	080031b9 	.word	0x080031b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e030      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e022      	b.n	80031fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031c6:	e01c      	b.n	8003202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d903      	bls.n	80031d6 <DMA_CheckFifoParam+0xb6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031d4:	e018      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e015      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e00b      	b.n	8003206 <DMA_CheckFifoParam+0xe6>
      break;
 80031ee:	bf00      	nop
 80031f0:	e00a      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e008      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e006      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;   
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
    }
  } 
  
  return status; 
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e16b      	b.n	800350c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 815a 	bne.w	8003506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003266:	2b02      	cmp	r3, #2
 8003268:	d130      	bne.n	80032cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0201 	and.w	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d017      	beq.n	8003308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d123      	bne.n	800335c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80b4 	beq.w	8003506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b60      	ldr	r3, [pc, #384]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a5f      	ldr	r2, [pc, #380]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <HAL_GPIO_Init+0x30c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_GPIO_Init+0x310>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_GPIO_Init+0x314>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x226>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_GPIO_Init+0x318>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x222>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_GPIO_Init+0x31c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x21e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <HAL_GPIO_Init+0x320>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x21a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4e      	ldr	r2, [pc, #312]	; (800353c <HAL_GPIO_Init+0x324>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x216>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_GPIO_Init+0x328>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x212>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_GPIO_Init+0x32c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <HAL_GPIO_Init+0x330>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x20a>
 800341e:	2307      	movs	r3, #7
 8003420:	e00e      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003422:	2308      	movs	r3, #8
 8003424:	e00c      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003426:	2306      	movs	r3, #6
 8003428:	e00a      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342a:	2305      	movs	r3, #5
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x228>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x228>
 800343e:	2300      	movs	r3, #0
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f002 0203 	and.w	r2, r2, #3
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	; (8003528 <HAL_GPIO_Init+0x310>)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_GPIO_Init+0x334>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003482:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_GPIO_Init+0x334>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_GPIO_Init+0x334>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <HAL_GPIO_Init+0x334>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_GPIO_Init+0x334>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <HAL_GPIO_Init+0x334>)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_GPIO_Init+0x334>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003500:	4a12      	ldr	r2, [pc, #72]	; (800354c <HAL_GPIO_Init+0x334>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	f67f ae90 	bls.w	8003234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	40013800 	.word	0x40013800
 800352c:	40020000 	.word	0x40020000
 8003530:	40020400 	.word	0x40020400
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40021400 	.word	0x40021400
 8003544:	40021800 	.word	0x40021800
 8003548:	40021c00 	.word	0x40021c00
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e264      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d075      	beq.n	800368e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	4ba3      	ldr	r3, [pc, #652]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b9d      	ldr	r3, [pc, #628]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b99      	ldr	r3, [pc, #612]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x108>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e23f      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x74>
 80035ea:	4b91      	ldr	r3, [pc, #580]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x98>
 8003602:	4b8b      	ldr	r3, [pc, #556]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b88      	ldr	r3, [pc, #544]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a87      	ldr	r2, [pc, #540]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xb0>
 800361c:	4b84      	ldr	r3, [pc, #528]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a83      	ldr	r2, [pc, #524]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f8cc 	bl	80027d8 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f8c8 	bl	80027d8 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e204      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xc0>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7ff f8b8 	bl	80027d8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7ff f8b4 	bl	80027d8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1f0      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0xe8>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b62      	ldr	r3, [pc, #392]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b5c      	ldr	r3, [pc, #368]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c4      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4952      	ldr	r1, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7ff f86d 	bl	80027d8 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7ff f869 	bl	80027d8 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a5      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4940      	ldr	r1, [pc, #256]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_OscConfig+0x2b0>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7ff f84c 	bl	80027d8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7ff f848 	bl	80027d8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e184      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d030      	beq.n	80037d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7ff f82c 	bl	80027d8 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7ff f828 	bl	80027d8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e164      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x200>
 80037a2:	e015      	b.n	80037d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_OscConfig+0x2b4>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7ff f815 	bl	80027d8 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b2:	f7ff f811 	bl	80027d8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e14d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f0      	bne.n	80037b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a0 	beq.w	800391e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d121      	bne.n	800385e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_RCC_OscConfig+0x2b8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe ffd7 	bl	80027d8 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	e011      	b.n	8003852 <HAL_RCC_OscConfig+0x2ce>
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	42470000 	.word	0x42470000
 8003838:	42470e80 	.word	0x42470e80
 800383c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe ffca 	bl	80027d8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e106      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b85      	ldr	r3, [pc, #532]	; (8003a68 <HAL_RCC_OscConfig+0x4e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x2f0>
 8003866:	4b81      	ldr	r3, [pc, #516]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a80      	ldr	r2, [pc, #512]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	e01c      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b05      	cmp	r3, #5
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x312>
 800387c:	4b7b      	ldr	r3, [pc, #492]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a7a      	ldr	r2, [pc, #488]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	4b78      	ldr	r3, [pc, #480]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a77      	ldr	r2, [pc, #476]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x32a>
 8003896:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a74      	ldr	r2, [pc, #464]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a71      	ldr	r2, [pc, #452]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d015      	beq.n	80038e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe ff8f 	bl	80027d8 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe ff8b 	bl	80027d8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0c5      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCC_OscConfig+0x33a>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e2:	f7fe ff79 	bl	80027d8 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fe ff75 	bl	80027d8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e0af      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ee      	bne.n	80038ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b56      	ldr	r3, [pc, #344]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a55      	ldr	r2, [pc, #340]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 809b 	beq.w	8003a5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d05c      	beq.n	80039ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d141      	bne.n	80039c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fe ff49 	bl	80027d8 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fe ff45 	bl	80027d8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e081      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	061b      	lsls	r3, r3, #24
 800398c:	4937      	ldr	r1, [pc, #220]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe ff1e 	bl	80027d8 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe ff1a 	bl	80027d8 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e056      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x41c>
 80039be:	e04e      	b.n	8003a5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x4ec>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fe ff07 	bl	80027d8 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fe ff03 	bl	80027d8 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e03f      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x44a>
 80039ec:	e037      	b.n	8003a5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e032      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d028      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d11a      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	42470060 	.word	0x42470060

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d90c      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	494d      	ldr	r1, [pc, #308]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d044      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e067      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4934      	ldr	r1, [pc, #208]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7fe fe38 	bl	80027d8 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe fe34 	bl	80027d8 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20c      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4916      	ldr	r1, [pc, #88]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490e      	ldr	r1, [pc, #56]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfa:	f000 f821 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fd98 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08006978 	.word	0x08006978
 8003c38:	20000064 	.word	0x20000064
 8003c3c:	20000068 	.word	0x20000068

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	2300      	movs	r3, #0
 8003c52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c58:	4b67      	ldr	r3, [pc, #412]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d00d      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x40>
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	f200 80bd 	bhi.w	8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c72:	e0b7      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b61      	ldr	r3, [pc, #388]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c76:	60bb      	str	r3, [r7, #8]
       break;
 8003c78:	e0b7      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c7c:	60bb      	str	r3, [r7, #8]
      break;
 8003c7e:	e0b4      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8a:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04d      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c96:	4b58      	ldr	r3, [pc, #352]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	ea02 0800 	and.w	r8, r2, r0
 8003cae:	ea03 0901 	and.w	r9, r3, r1
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	014b      	lsls	r3, r1, #5
 8003cc0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cc4:	0142      	lsls	r2, r0, #5
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	ebb0 0008 	subs.w	r0, r0, r8
 8003cce:	eb61 0109 	sbc.w	r1, r1, r9
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	018b      	lsls	r3, r1, #6
 8003cdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ce0:	0182      	lsls	r2, r0, #6
 8003ce2:	1a12      	subs	r2, r2, r0
 8003ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	00d9      	lsls	r1, r3, #3
 8003cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf6:	00d0      	lsls	r0, r2, #3
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	eb12 0208 	adds.w	r2, r2, r8
 8003d00:	eb43 0309 	adc.w	r3, r3, r9
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f04f 0100 	mov.w	r1, #0
 8003d0c:	0259      	lsls	r1, r3, #9
 8003d0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d12:	0250      	lsls	r0, r2, #9
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	f7fc ff1e 	bl	8000b64 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e04a      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d42:	f04f 0100 	mov.w	r1, #0
 8003d46:	ea02 0400 	and.w	r4, r2, r0
 8003d4a:	ea03 0501 	and.w	r5, r3, r1
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	014b      	lsls	r3, r1, #5
 8003d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d60:	0142      	lsls	r2, r0, #5
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	1b00      	subs	r0, r0, r4
 8003d68:	eb61 0105 	sbc.w	r1, r1, r5
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	018b      	lsls	r3, r1, #6
 8003d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d7a:	0182      	lsls	r2, r0, #6
 8003d7c:	1a12      	subs	r2, r2, r0
 8003d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	00d9      	lsls	r1, r3, #3
 8003d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d90:	00d0      	lsls	r0, r2, #3
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	1912      	adds	r2, r2, r4
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	0299      	lsls	r1, r3, #10
 8003da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003daa:	0290      	lsls	r0, r2, #10
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f7fc fed2 	bl	8000b64 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	60bb      	str	r3, [r7, #8]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003de6:	60bb      	str	r3, [r7, #8]
      break;
 8003de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dea:	68bb      	ldr	r3, [r7, #8]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	007a1200 	.word	0x007a1200

08003e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000064 	.word	0x20000064

08003e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e20:	f7ff fff0 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	0a9b      	lsrs	r3, r3, #10
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4903      	ldr	r1, [pc, #12]	; (8003e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	08006988 	.word	0x08006988

08003e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e48:	f7ff ffdc 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	0b5b      	lsrs	r3, r3, #13
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	4903      	ldr	r1, [pc, #12]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	08006988 	.word	0x08006988

08003e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e041      	b.n	8003f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f9e8 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fce6 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d001      	beq.n	8003f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e04e      	b.n	8003fc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d01d      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x80>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d111      	bne.n	8003fb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d010      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fae:	e007      	b.n	8003fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40001800 	.word	0x40001800

08003fec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e041      	b.n	8004082 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe f99a 	bl	800234c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fc26 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start+0x24>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e022      	b.n	80040f6 <HAL_TIM_PWM_Start+0x6a>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start+0x3e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e015      	b.n	80040f6 <HAL_TIM_PWM_Start+0x6a>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x58>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e008      	b.n	80040f6 <HAL_TIM_PWM_Start+0x6a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07c      	b.n	80041f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0x82>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410c:	e013      	b.n	8004136 <HAL_TIM_PWM_Start+0xaa>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0x92>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e00b      	b.n	8004136 <HAL_TIM_PWM_Start+0xaa>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412c:	e003      	b.n	8004136 <HAL_TIM_PWM_Start+0xaa>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	6839      	ldr	r1, [r7, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdec 	bl	8004d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <HAL_TIM_PWM_Start+0x174>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIM_PWM_Start+0xcc>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <HAL_TIM_PWM_Start+0x178>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <HAL_TIM_PWM_Start+0xd0>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_TIM_PWM_Start+0xd2>
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <HAL_TIM_PWM_Start+0x174>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d01d      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_TIM_PWM_Start+0x17c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <HAL_TIM_PWM_Start+0x180>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <HAL_TIM_PWM_Start+0x184>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <HAL_TIM_PWM_Start+0x178>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_TIM_PWM_Start+0x188>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x136>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_TIM_PWM_Start+0x18c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d010      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	e007      	b.n	80041f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40010000 	.word	0x40010000
 8004204:	40010400 	.word	0x40010400
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40014000 	.word	0x40014000
 8004218:	40001800 	.word	0x40001800

0800421c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e097      	b.n	8004360 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7fd ff0d 	bl	8002064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004260:	f023 0307 	bic.w	r3, r3, #7
 8004264:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f000 fb03 	bl	800487c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	4313      	orrs	r3, r2
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042bc:	f023 030c 	bic.w	r3, r3, #12
 80042c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	4313      	orrs	r3, r2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	011a      	lsls	r2, r3, #4
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	031b      	lsls	r3, r3, #12
 80042ec:	4313      	orrs	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4313      	orrs	r3, r2
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004378:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004380:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004388:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004390:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d110      	bne.n	80043ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d102      	bne.n	80043a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800439e:	7b7b      	ldrb	r3, [r7, #13]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e069      	b.n	800447c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	e031      	b.n	800441e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d110      	bne.n	80043e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c0:	7bbb      	ldrb	r3, [r7, #14]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043c6:	7b3b      	ldrb	r3, [r7, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e055      	b.n	800447c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e0:	e01d      	b.n	800441e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e8:	7bbb      	ldrb	r3, [r7, #14]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043ee:	7b7b      	ldrb	r3, [r7, #13]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d102      	bne.n	80043fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043f4:	7b3b      	ldrb	r3, [r7, #12]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d001      	beq.n	80043fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e03e      	b.n	800447c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_TIM_Encoder_Start+0xc4>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b04      	cmp	r3, #4
 8004428:	d008      	beq.n	800443c <HAL_TIM_Encoder_Start+0xd4>
 800442a:	e00f      	b.n	800444c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2201      	movs	r2, #1
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fc71 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 800443a:	e016      	b.n	800446a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	2104      	movs	r1, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fc69 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 800444a:	e00e      	b.n	800446a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fc61 	bl	8004d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2201      	movs	r2, #1
 8004460:	2104      	movs	r1, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fc5a 	bl	8004d1c <TIM_CCxChannelCmd>
      break;
 8004468:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d122      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11b      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0202 	mvn.w	r2, #2
 80044b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f9ba 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9ac 	bl	800482c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f9bd 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0204 	mvn.w	r2, #4
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f990 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f982 	bl	800482c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f993 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b08      	cmp	r3, #8
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b08      	cmp	r3, #8
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0208 	mvn.w	r2, #8
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2204      	movs	r2, #4
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f966 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f958 	bl	800482c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f969 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f93c 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f92e 	bl	800482c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f93f 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0201 	mvn.w	r2, #1
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f908 	bl	8004818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fc20 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d10e      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d107      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f904 	bl	8004868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d10e      	bne.n	800468c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b20      	cmp	r3, #32
 800467a:	d107      	bne.n	800468c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0220 	mvn.w	r2, #32
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fbea 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0ae      	b.n	8004810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	f200 809f 	bhi.w	8004800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046fd 	.word	0x080046fd
 80046cc:	08004801 	.word	0x08004801
 80046d0:	08004801 	.word	0x08004801
 80046d4:	08004801 	.word	0x08004801
 80046d8:	0800473d 	.word	0x0800473d
 80046dc:	08004801 	.word	0x08004801
 80046e0:	08004801 	.word	0x08004801
 80046e4:	08004801 	.word	0x08004801
 80046e8:	0800477f 	.word	0x0800477f
 80046ec:	08004801 	.word	0x08004801
 80046f0:	08004801 	.word	0x08004801
 80046f4:	08004801 	.word	0x08004801
 80046f8:	080047bf 	.word	0x080047bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f95a 	bl	80049bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
      break;
 800473a:	e064      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f9aa 	bl	8004a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6999      	ldr	r1, [r3, #24]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	021a      	lsls	r2, r3, #8
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]
      break;
 800477c:	e043      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f9ff 	bl	8004b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0208 	orr.w	r2, r2, #8
 8004798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0204 	bic.w	r2, r2, #4
 80047a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	61da      	str	r2, [r3, #28]
      break;
 80047bc:	e023      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa53 	bl	8004c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69d9      	ldr	r1, [r3, #28]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	021a      	lsls	r2, r3, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3b      	ldr	r2, [pc, #236]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <TIM_Base_SetConfig+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d027      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d023      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d017      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x12c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0x130>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_Base_SetConfig+0x134>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <TIM_Base_SetConfig+0x138>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <TIM_Base_SetConfig+0x13c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800
 80049b0:	40001800 	.word	0x40001800
 80049b4:	40001c00 	.word	0x40001c00
 80049b8:	40002000 	.word	0x40002000

080049bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f023 0201 	bic.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0302 	bic.w	r3, r3, #2
 8004a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <TIM_OC1_SetConfig+0xd8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC1_SetConfig+0x64>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <TIM_OC1_SetConfig+0xdc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10c      	bne.n	8004a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0308 	bic.w	r3, r3, #8
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <TIM_OC1_SetConfig+0xd8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_OC1_SetConfig+0x8e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <TIM_OC1_SetConfig+0xdc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d111      	bne.n	8004a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0210 	bic.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0320 	bic.w	r3, r3, #32
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <TIM_OC2_SetConfig+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC2_SetConfig+0x68>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <TIM_OC2_SetConfig+0xe8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10d      	bne.n	8004b20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <TIM_OC2_SetConfig+0xe4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_OC2_SetConfig+0x94>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <TIM_OC2_SetConfig+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d113      	bne.n	8004b58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
}
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400

08004b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC3_SetConfig+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0x92>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400

08004c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <TIM_OC4_SetConfig+0xa4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC4_SetConfig+0x68>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <TIM_OC4_SetConfig+0xa8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d109      	bne.n	8004cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40010400 	.word	0x40010400

08004d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2201      	movs	r2, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e05a      	b.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d01d      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10c      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40010400 	.word	0x40010400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40001800 	.word	0x40001800

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e03f      	b.n	8004f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fd fb5e 	bl	8002570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fee3 	bl	8005c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d11d      	bne.n	8004f78 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Receive_DMA+0x26>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e016      	b.n	8004f7a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_UART_Receive_DMA+0x38>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e00f      	b.n	8004f7a <HAL_UART_Receive_DMA+0x58>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fc36 	bl	80057e0 <UART_Start_Receive_DMA>
 8004f74:	4603      	mov	r3, r0
 8004f76:	e000      	b.n	8004f7a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b090      	sub	sp, #64	; 0x40
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b80      	cmp	r3, #128	; 0x80
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b21      	cmp	r3, #33	; 0x21
 8004fae:	d128      	bne.n	8005002 <HAL_UART_DMAStop+0x80>
 8004fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fd fe12 	bl	8002c20 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fc89 	bl	8005914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b22      	cmp	r3, #34	; 0x22
 8005022:	d128      	bne.n	8005076 <HAL_UART_DMAStop+0xf4>
 8005024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	60fb      	str	r3, [r7, #12]
   return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	617b      	str	r3, [r7, #20]
   return(result);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fdd8 	bl	8002c20 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fc77 	bl	8005964 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3740      	adds	r7, #64	; 0x40
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b0ba      	sub	sp, #232	; 0xe8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d009      	beq.n	80050e6 <HAL_UART_IRQHandler+0x66>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fd1f 	bl	8005b22 <UART_Receive_IT>
      return;
 80050e4:	e256      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80de 	beq.w	80052ac <HAL_UART_IRQHandler+0x22c>
 80050f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005100:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80d1 	beq.w	80052ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_UART_IRQHandler+0xae>
 8005116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0201 	orr.w	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_UART_IRQHandler+0xd2>
 800513a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f043 0202 	orr.w	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_UART_IRQHandler+0xf6>
 800515e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <HAL_UART_IRQHandler+0x126>
 8005182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f043 0208 	orr.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 81ed 	beq.w	800558a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_UART_IRQHandler+0x14e>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fcaa 	bl	8005b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_UART_IRQHandler+0x17a>
 80051f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04f      	beq.n	800529a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fbb2 	bl	8005964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d141      	bne.n	8005292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800523a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1d9      	bne.n	800520e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4a7d      	ldr	r2, [pc, #500]	; (800545c <HAL_UART_IRQHandler+0x3dc>)
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fd46 	bl	8002d00 <HAL_DMA_Abort_IT>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e00e      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f99a 	bl	80055c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005290:	e00a      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f996 	bl	80055c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e006      	b.n	80052a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f992 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052a6:	e170      	b.n	800558a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	bf00      	nop
    return;
 80052aa:	e16e      	b.n	800558a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 814a 	bne.w	800554a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8143 	beq.w	800554a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 813c 	beq.w	800554a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	f040 80b4 	bne.w	8005460 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8140 	beq.w	800558e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005316:	429a      	cmp	r2, r3
 8005318:	f080 8139 	bcs.w	800558e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005322:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	f000 8088 	beq.w	8005442 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800535e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800536a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d9      	bne.n	8005332 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800538e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e1      	bne.n	800537e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e3      	bne.n	80053ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005424:	65ba      	str	r2, [r7, #88]	; 0x58
 8005426:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800542a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e3      	bne.n	8005400 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd fbef 	bl	8002c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800544a:	b29b      	uxth	r3, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8c0 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005458:	e099      	b.n	800558e <HAL_UART_IRQHandler+0x50e>
 800545a:	bf00      	nop
 800545c:	08005a2b 	.word	0x08005a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005468:	b29b      	uxth	r3, r3
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 808b 	beq.w	8005592 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800547c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8086 	beq.w	8005592 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800549c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054aa:	647a      	str	r2, [r7, #68]	; 0x44
 80054ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e3      	bne.n	8005486 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	623b      	str	r3, [r7, #32]
   return(result);
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054e2:	633a      	str	r2, [r7, #48]	; 0x30
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e3      	bne.n	80054be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	60fb      	str	r3, [r7, #12]
   return(result);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005528:	61fa      	str	r2, [r7, #28]
 800552a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	69b9      	ldr	r1, [r7, #24]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	617b      	str	r3, [r7, #20]
   return(result);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e3      	bne.n	8005504 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800553c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f848 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005548:	e023      	b.n	8005592 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_UART_IRQHandler+0x4ea>
 8005556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa75 	bl	8005a52 <UART_Transmit_IT>
    return;
 8005568:	e014      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <HAL_UART_IRQHandler+0x514>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fab5 	bl	8005af2 <UART_EndTransmit_IT>
    return;
 8005588:	e004      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
    return;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
      return;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_UART_IRQHandler+0x514>
      return;
 8005592:	bf00      	nop
  }
}
 8005594:	37e8      	adds	r7, #232	; 0xe8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b09c      	sub	sp, #112	; 0x70
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d172      	bne.n	80056f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	2200      	movs	r2, #0
 8005610:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005632:	65ba      	str	r2, [r7, #88]	; 0x58
 8005634:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3314      	adds	r3, #20
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	667b      	str	r3, [r7, #100]	; 0x64
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005666:	647a      	str	r2, [r7, #68]	; 0x44
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800566c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e5      	bne.n	8005646 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	623b      	str	r3, [r7, #32]
   return(result);
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005690:	663b      	str	r3, [r7, #96]	; 0x60
 8005692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800569a:	633a      	str	r2, [r7, #48]	; 0x30
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e5      	bne.n	800567a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d119      	bne.n	80056f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f023 0310 	bic.w	r3, r3, #16
 80056d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056de:	61fa      	str	r2, [r7, #28]
 80056e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	617b      	str	r3, [r7, #20]
   return(result);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e5      	bne.n	80056be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d106      	bne.n	8005708 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fe:	4619      	mov	r1, r3
 8005700:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005702:	f7ff ff69 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005706:	e002      	b.n	800570e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005708:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800570a:	f7ff ff51 	bl	80055b0 <HAL_UART_RxCpltCallback>
}
 800570e:	bf00      	nop
 8005710:	3770      	adds	r7, #112	; 0x70
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	2b01      	cmp	r3, #1
 800572a:	d108      	bne.n	800573e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	4619      	mov	r1, r3
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff ff4e 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800573c:	e002      	b.n	8005744 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7fb fc5e 	bl	8001000 <HAL_UART_RxHalfCpltCallback>
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b21      	cmp	r3, #33	; 0x21
 800577e:	d108      	bne.n	8005792 <UART_DMAError+0x46>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800578c:	68b8      	ldr	r0, [r7, #8]
 800578e:	f000 f8c1 	bl	8005914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b22      	cmp	r3, #34	; 0x22
 80057b2:	d108      	bne.n	80057c6 <UART_DMAError+0x7a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057c0:	68b8      	ldr	r0, [r7, #8]
 80057c2:	f000 f8cf 	bl	8005964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0210 	orr.w	r2, r3, #16
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d2:	68b8      	ldr	r0, [r7, #8]
 80057d4:	f7ff fef6 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b098      	sub	sp, #96	; 0x60
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <UART_Start_Receive_DMA+0x128>)
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	4a3d      	ldr	r2, [pc, #244]	; (800590c <UART_Start_Receive_DMA+0x12c>)
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <UART_Start_Receive_DMA+0x130>)
 800581e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	2200      	movs	r2, #0
 8005826:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	f7fd f996 	bl	8002b70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	65bb      	str	r3, [r7, #88]	; 0x58
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005882:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	657b      	str	r3, [r7, #84]	; 0x54
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3314      	adds	r3, #20
 80058d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	617b      	str	r3, [r7, #20]
   return(result);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e0:	653b      	str	r3, [r7, #80]	; 0x50
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3314      	adds	r3, #20
 80058e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058ea:	627a      	str	r2, [r7, #36]	; 0x24
 80058ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6a39      	ldr	r1, [r7, #32]
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e5      	bne.n	80058ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3760      	adds	r7, #96	; 0x60
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	080055f1 	.word	0x080055f1
 800590c:	08005717 	.word	0x08005717
 8005910:	0800574d 	.word	0x0800574d

08005914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	60bb      	str	r3, [r7, #8]
   return(result);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	61ba      	str	r2, [r7, #24]
 800593e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	613b      	str	r3, [r7, #16]
   return(result);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005958:	bf00      	nop
 800595a:	3724      	adds	r7, #36	; 0x24
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b095      	sub	sp, #84	; 0x54
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800598c:	643a      	str	r2, [r7, #64]	; 0x40
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d119      	bne.n	8005a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
 80059f2:	647b      	str	r3, [r7, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059fc:	61ba      	str	r2, [r7, #24]
 80059fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a1e:	bf00      	nop
 8005a20:	3754      	adds	r7, #84	; 0x54
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fdbd 	bl	80055c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b21      	cmp	r3, #33	; 0x21
 8005a64:	d13e      	bne.n	8005ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	d114      	bne.n	8005a9a <UART_Transmit_IT+0x48>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d110      	bne.n	8005a9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	1c9a      	adds	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	621a      	str	r2, [r3, #32]
 8005a98:	e008      	b.n	8005aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6211      	str	r1, [r2, #32]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10f      	bne.n	8005ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fd42 	bl	800559c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08c      	sub	sp, #48	; 0x30
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b22      	cmp	r3, #34	; 0x22
 8005b34:	f040 80ab 	bne.w	8005c8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b40:	d117      	bne.n	8005b72 <UART_Receive_IT+0x50>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	1c9a      	adds	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b70:	e026      	b.n	8005bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d007      	beq.n	8005b96 <UART_Receive_IT+0x74>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <UART_Receive_IT+0x82>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e008      	b.n	8005bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d15a      	bne.n	8005c8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0220 	bic.w	r2, r2, #32
 8005be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d135      	bne.n	8005c80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f023 0310 	bic.w	r3, r3, #16
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	623a      	str	r2, [r7, #32]
 8005c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	69f9      	ldr	r1, [r7, #28]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e5      	bne.n	8005c1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d10a      	bne.n	8005c72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fcad 	bl	80055d8 <HAL_UARTEx_RxEventCallback>
 8005c7e:	e002      	b.n	8005c86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fc95 	bl	80055b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e002      	b.n	8005c90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3730      	adds	r7, #48	; 0x30
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	b09f      	sub	sp, #124	; 0x7c
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cae:	68d9      	ldr	r1, [r3, #12]
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	ea40 0301 	orr.w	r3, r0, r1
 8005cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cdc:	f021 010c 	bic.w	r1, r1, #12
 8005ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf6:	6999      	ldr	r1, [r3, #24]
 8005cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	ea40 0301 	orr.w	r3, r0, r1
 8005d00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4bc5      	ldr	r3, [pc, #788]	; (800601c <UART_SetConfig+0x384>)
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d004      	beq.n	8005d16 <UART_SetConfig+0x7e>
 8005d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4bc3      	ldr	r3, [pc, #780]	; (8006020 <UART_SetConfig+0x388>)
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d103      	bne.n	8005d1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d16:	f7fe f895 	bl	8003e44 <HAL_RCC_GetPCLK2Freq>
 8005d1a:	6778      	str	r0, [r7, #116]	; 0x74
 8005d1c:	e002      	b.n	8005d24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d1e:	f7fe f87d 	bl	8003e1c <HAL_RCC_GetPCLK1Freq>
 8005d22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2c:	f040 80b6 	bne.w	8005e9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d32:	461c      	mov	r4, r3
 8005d34:	f04f 0500 	mov.w	r5, #0
 8005d38:	4622      	mov	r2, r4
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	1891      	adds	r1, r2, r2
 8005d3e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d40:	415b      	adcs	r3, r3
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d48:	1912      	adds	r2, r2, r4
 8005d4a:	eb45 0303 	adc.w	r3, r5, r3
 8005d4e:	f04f 0000 	mov.w	r0, #0
 8005d52:	f04f 0100 	mov.w	r1, #0
 8005d56:	00d9      	lsls	r1, r3, #3
 8005d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d5c:	00d0      	lsls	r0, r2, #3
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	1911      	adds	r1, r2, r4
 8005d64:	6639      	str	r1, [r7, #96]	; 0x60
 8005d66:	416b      	adcs	r3, r5
 8005d68:	667b      	str	r3, [r7, #100]	; 0x64
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	1891      	adds	r1, r2, r2
 8005d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d78:	415b      	adcs	r3, r3
 8005d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d84:	f7fa feee 	bl	8000b64 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4ba5      	ldr	r3, [pc, #660]	; (8006024 <UART_SetConfig+0x38c>)
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	011e      	lsls	r6, r3, #4
 8005d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d98:	461c      	mov	r4, r3
 8005d9a:	f04f 0500 	mov.w	r5, #0
 8005d9e:	4622      	mov	r2, r4
 8005da0:	462b      	mov	r3, r5
 8005da2:	1891      	adds	r1, r2, r2
 8005da4:	6339      	str	r1, [r7, #48]	; 0x30
 8005da6:	415b      	adcs	r3, r3
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
 8005daa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dae:	1912      	adds	r2, r2, r4
 8005db0:	eb45 0303 	adc.w	r3, r5, r3
 8005db4:	f04f 0000 	mov.w	r0, #0
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	00d9      	lsls	r1, r3, #3
 8005dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dc2:	00d0      	lsls	r0, r2, #3
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	1911      	adds	r1, r2, r4
 8005dca:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dcc:	416b      	adcs	r3, r5
 8005dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dde:	415b      	adcs	r3, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dea:	f7fa febb 	bl	8000b64 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b8c      	ldr	r3, [pc, #560]	; (8006024 <UART_SetConfig+0x38c>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a87      	ldr	r2, [pc, #540]	; (8006024 <UART_SetConfig+0x38c>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e14:	441e      	add	r6, r3
 8005e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f04f 0100 	mov.w	r1, #0
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	1894      	adds	r4, r2, r2
 8005e24:	623c      	str	r4, [r7, #32]
 8005e26:	415b      	adcs	r3, r3
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e2e:	1812      	adds	r2, r2, r0
 8005e30:	eb41 0303 	adc.w	r3, r1, r3
 8005e34:	f04f 0400 	mov.w	r4, #0
 8005e38:	f04f 0500 	mov.w	r5, #0
 8005e3c:	00dd      	lsls	r5, r3, #3
 8005e3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e42:	00d4      	lsls	r4, r2, #3
 8005e44:	4622      	mov	r2, r4
 8005e46:	462b      	mov	r3, r5
 8005e48:	1814      	adds	r4, r2, r0
 8005e4a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e4c:	414b      	adcs	r3, r1
 8005e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	461a      	mov	r2, r3
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	1891      	adds	r1, r2, r2
 8005e5c:	61b9      	str	r1, [r7, #24]
 8005e5e:	415b      	adcs	r3, r3
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e6a:	f7fa fe7b 	bl	8000b64 <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4b6c      	ldr	r3, [pc, #432]	; (8006024 <UART_SetConfig+0x38c>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	2164      	movs	r1, #100	; 0x64
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3332      	adds	r3, #50	; 0x32
 8005e86:	4a67      	ldr	r2, [pc, #412]	; (8006024 <UART_SetConfig+0x38c>)
 8005e88:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0207 	and.w	r2, r3, #7
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4432      	add	r2, r6
 8005e98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e9a:	e0b9      	b.n	8006010 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	f04f 0500 	mov.w	r5, #0
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	6139      	str	r1, [r7, #16]
 8005eac:	415b      	adcs	r3, r3
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eb4:	1912      	adds	r2, r2, r4
 8005eb6:	eb45 0303 	adc.w	r3, r5, r3
 8005eba:	f04f 0000 	mov.w	r0, #0
 8005ebe:	f04f 0100 	mov.w	r1, #0
 8005ec2:	00d9      	lsls	r1, r3, #3
 8005ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec8:	00d0      	lsls	r0, r2, #3
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	eb12 0804 	adds.w	r8, r2, r4
 8005ed2:	eb43 0905 	adc.w	r9, r3, r5
 8005ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f04f 0100 	mov.w	r1, #0
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	008b      	lsls	r3, r1, #2
 8005eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005eee:	0082      	lsls	r2, r0, #2
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fe36 	bl	8000b64 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4b49      	ldr	r3, [pc, #292]	; (8006024 <UART_SetConfig+0x38c>)
 8005efe:	fba3 2302 	umull	r2, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	011e      	lsls	r6, r3, #4
 8005f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	1894      	adds	r4, r2, r2
 8005f14:	60bc      	str	r4, [r7, #8]
 8005f16:	415b      	adcs	r3, r3
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f1e:	1812      	adds	r2, r2, r0
 8005f20:	eb41 0303 	adc.w	r3, r1, r3
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	f04f 0500 	mov.w	r5, #0
 8005f2c:	00dd      	lsls	r5, r3, #3
 8005f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f32:	00d4      	lsls	r4, r2, #3
 8005f34:	4622      	mov	r2, r4
 8005f36:	462b      	mov	r3, r5
 8005f38:	1814      	adds	r4, r2, r0
 8005f3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	f04f 0200 	mov.w	r2, #0
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	008b      	lsls	r3, r1, #2
 8005f54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f58:	0082      	lsls	r2, r0, #2
 8005f5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f5e:	f7fa fe01 	bl	8000b64 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <UART_SetConfig+0x38c>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <UART_SetConfig+0x38c>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f86:	441e      	add	r6, r3
 8005f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	1894      	adds	r4, r2, r2
 8005f96:	603c      	str	r4, [r7, #0]
 8005f98:	415b      	adcs	r3, r3
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa0:	1812      	adds	r2, r2, r0
 8005fa2:	eb41 0303 	adc.w	r3, r1, r3
 8005fa6:	f04f 0400 	mov.w	r4, #0
 8005faa:	f04f 0500 	mov.w	r5, #0
 8005fae:	00dd      	lsls	r5, r3, #3
 8005fb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fb4:	00d4      	lsls	r4, r2, #3
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	462b      	mov	r3, r5
 8005fba:	eb12 0a00 	adds.w	sl, r2, r0
 8005fbe:	eb43 0b01 	adc.w	fp, r3, r1
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	008b      	lsls	r3, r1, #2
 8005fd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fda:	0082      	lsls	r2, r0, #2
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa fdc0 	bl	8000b64 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <UART_SetConfig+0x38c>)
 8005fea:	fba3 1302 	umull	r1, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2164      	movs	r1, #100	; 0x64
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	3332      	adds	r3, #50	; 0x32
 8005ffc:	4a09      	ldr	r2, [pc, #36]	; (8006024 <UART_SetConfig+0x38c>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4432      	add	r2, r6
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	377c      	adds	r7, #124	; 0x7c
 8006014:	46bd      	mov	sp, r7
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	bf00      	nop
 800601c:	40011000 	.word	0x40011000
 8006020:	40011400 	.word	0x40011400
 8006024:	51eb851f 	.word	0x51eb851f

08006028 <__errno>:
 8006028:	4b01      	ldr	r3, [pc, #4]	; (8006030 <__errno+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000070 	.word	0x20000070

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4d0d      	ldr	r5, [pc, #52]	; (800606c <__libc_init_array+0x38>)
 8006038:	4c0d      	ldr	r4, [pc, #52]	; (8006070 <__libc_init_array+0x3c>)
 800603a:	1b64      	subs	r4, r4, r5
 800603c:	10a4      	asrs	r4, r4, #2
 800603e:	2600      	movs	r6, #0
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	4d0b      	ldr	r5, [pc, #44]	; (8006074 <__libc_init_array+0x40>)
 8006046:	4c0c      	ldr	r4, [pc, #48]	; (8006078 <__libc_init_array+0x44>)
 8006048:	f000 fc8a 	bl	8006960 <_init>
 800604c:	1b64      	subs	r4, r4, r5
 800604e:	10a4      	asrs	r4, r4, #2
 8006050:	2600      	movs	r6, #0
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	f855 3b04 	ldr.w	r3, [r5], #4
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	f855 3b04 	ldr.w	r3, [r5], #4
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	080069c4 	.word	0x080069c4
 8006070:	080069c4 	.word	0x080069c4
 8006074:	080069c4 	.word	0x080069c4
 8006078:	080069c8 	.word	0x080069c8

0800607c <memset>:
 800607c:	4402      	add	r2, r0
 800607e:	4603      	mov	r3, r0
 8006080:	4293      	cmp	r3, r2
 8006082:	d100      	bne.n	8006086 <memset+0xa>
 8006084:	4770      	bx	lr
 8006086:	f803 1b01 	strb.w	r1, [r3], #1
 800608a:	e7f9      	b.n	8006080 <memset+0x4>

0800608c <powf>:
 800608c:	b508      	push	{r3, lr}
 800608e:	ed2d 8b04 	vpush	{d8-d9}
 8006092:	eeb0 9a40 	vmov.f32	s18, s0
 8006096:	eef0 8a60 	vmov.f32	s17, s1
 800609a:	f000 f8b5 	bl	8006208 <__ieee754_powf>
 800609e:	4b43      	ldr	r3, [pc, #268]	; (80061ac <powf+0x120>)
 80060a0:	f993 3000 	ldrsb.w	r3, [r3]
 80060a4:	3301      	adds	r3, #1
 80060a6:	eeb0 8a40 	vmov.f32	s16, s0
 80060aa:	d012      	beq.n	80060d2 <powf+0x46>
 80060ac:	eef4 8a68 	vcmp.f32	s17, s17
 80060b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b4:	d60d      	bvs.n	80060d2 <powf+0x46>
 80060b6:	eeb4 9a49 	vcmp.f32	s18, s18
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	d70d      	bvc.n	80060dc <powf+0x50>
 80060c0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80060c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060cc:	bf08      	it	eq
 80060ce:	eeb0 8a67 	vmoveq.f32	s16, s15
 80060d2:	eeb0 0a48 	vmov.f32	s0, s16
 80060d6:	ecbd 8b04 	vpop	{d8-d9}
 80060da:	bd08      	pop	{r3, pc}
 80060dc:	eddf 9a34 	vldr	s19, [pc, #208]	; 80061b0 <powf+0x124>
 80060e0:	eeb4 9a69 	vcmp.f32	s18, s19
 80060e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e8:	d116      	bne.n	8006118 <powf+0x8c>
 80060ea:	eef4 8a69 	vcmp.f32	s17, s19
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	d057      	beq.n	80061a4 <powf+0x118>
 80060f4:	eeb0 0a68 	vmov.f32	s0, s17
 80060f8:	f000 fb50 	bl	800679c <finitef>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d0e8      	beq.n	80060d2 <powf+0x46>
 8006100:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006108:	d5e3      	bpl.n	80060d2 <powf+0x46>
 800610a:	f7ff ff8d 	bl	8006028 <__errno>
 800610e:	2321      	movs	r3, #33	; 0x21
 8006110:	6003      	str	r3, [r0, #0]
 8006112:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80061b4 <powf+0x128>
 8006116:	e7dc      	b.n	80060d2 <powf+0x46>
 8006118:	f000 fb40 	bl	800679c <finitef>
 800611c:	bb50      	cbnz	r0, 8006174 <powf+0xe8>
 800611e:	eeb0 0a49 	vmov.f32	s0, s18
 8006122:	f000 fb3b 	bl	800679c <finitef>
 8006126:	b328      	cbz	r0, 8006174 <powf+0xe8>
 8006128:	eeb0 0a68 	vmov.f32	s0, s17
 800612c:	f000 fb36 	bl	800679c <finitef>
 8006130:	b300      	cbz	r0, 8006174 <powf+0xe8>
 8006132:	eeb4 8a48 	vcmp.f32	s16, s16
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	d706      	bvc.n	800614a <powf+0xbe>
 800613c:	f7ff ff74 	bl	8006028 <__errno>
 8006140:	2321      	movs	r3, #33	; 0x21
 8006142:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8006146:	6003      	str	r3, [r0, #0]
 8006148:	e7c3      	b.n	80060d2 <powf+0x46>
 800614a:	f7ff ff6d 	bl	8006028 <__errno>
 800614e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006152:	2322      	movs	r3, #34	; 0x22
 8006154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	d508      	bpl.n	800616e <powf+0xe2>
 800615c:	eeb0 0a68 	vmov.f32	s0, s17
 8006160:	f000 fb30 	bl	80067c4 <rintf>
 8006164:	eeb4 0a68 	vcmp.f32	s0, s17
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	d1d1      	bne.n	8006112 <powf+0x86>
 800616e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80061b8 <powf+0x12c>
 8006172:	e7ae      	b.n	80060d2 <powf+0x46>
 8006174:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	d1a9      	bne.n	80060d2 <powf+0x46>
 800617e:	eeb0 0a49 	vmov.f32	s0, s18
 8006182:	f000 fb0b 	bl	800679c <finitef>
 8006186:	2800      	cmp	r0, #0
 8006188:	d0a3      	beq.n	80060d2 <powf+0x46>
 800618a:	eeb0 0a68 	vmov.f32	s0, s17
 800618e:	f000 fb05 	bl	800679c <finitef>
 8006192:	2800      	cmp	r0, #0
 8006194:	d09d      	beq.n	80060d2 <powf+0x46>
 8006196:	f7ff ff47 	bl	8006028 <__errno>
 800619a:	2322      	movs	r3, #34	; 0x22
 800619c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80061b0 <powf+0x124>
 80061a0:	6003      	str	r3, [r0, #0]
 80061a2:	e796      	b.n	80060d2 <powf+0x46>
 80061a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80061a8:	e793      	b.n	80060d2 <powf+0x46>
 80061aa:	bf00      	nop
 80061ac:	200000d4 	.word	0x200000d4
 80061b0:	00000000 	.word	0x00000000
 80061b4:	ff800000 	.word	0xff800000
 80061b8:	7f800000 	.word	0x7f800000

080061bc <sqrtf>:
 80061bc:	b508      	push	{r3, lr}
 80061be:	ed2d 8b02 	vpush	{d8}
 80061c2:	eeb0 8a40 	vmov.f32	s16, s0
 80061c6:	f000 fadf 	bl	8006788 <__ieee754_sqrtf>
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <sqrtf+0x44>)
 80061cc:	f993 3000 	ldrsb.w	r3, [r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	d011      	beq.n	80061f8 <sqrtf+0x3c>
 80061d4:	eeb4 8a48 	vcmp.f32	s16, s16
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	d60c      	bvs.n	80061f8 <sqrtf+0x3c>
 80061de:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006204 <sqrtf+0x48>
 80061e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80061e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ea:	d505      	bpl.n	80061f8 <sqrtf+0x3c>
 80061ec:	f7ff ff1c 	bl	8006028 <__errno>
 80061f0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80061f4:	2321      	movs	r3, #33	; 0x21
 80061f6:	6003      	str	r3, [r0, #0]
 80061f8:	ecbd 8b02 	vpop	{d8}
 80061fc:	bd08      	pop	{r3, pc}
 80061fe:	bf00      	nop
 8006200:	200000d4 	.word	0x200000d4
 8006204:	00000000 	.word	0x00000000

08006208 <__ieee754_powf>:
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	ee10 5a90 	vmov	r5, s1
 8006210:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006214:	ed2d 8b02 	vpush	{d8}
 8006218:	eeb0 8a40 	vmov.f32	s16, s0
 800621c:	eef0 8a60 	vmov.f32	s17, s1
 8006220:	f000 8291 	beq.w	8006746 <__ieee754_powf+0x53e>
 8006224:	ee10 8a10 	vmov	r8, s0
 8006228:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800622c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006230:	dc06      	bgt.n	8006240 <__ieee754_powf+0x38>
 8006232:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006236:	dd0a      	ble.n	800624e <__ieee754_powf+0x46>
 8006238:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800623c:	f000 8283 	beq.w	8006746 <__ieee754_powf+0x53e>
 8006240:	ecbd 8b02 	vpop	{d8}
 8006244:	48d8      	ldr	r0, [pc, #864]	; (80065a8 <__ieee754_powf+0x3a0>)
 8006246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800624a:	f000 bab5 	b.w	80067b8 <nanf>
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	da1f      	bge.n	8006294 <__ieee754_powf+0x8c>
 8006254:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006258:	da2e      	bge.n	80062b8 <__ieee754_powf+0xb0>
 800625a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800625e:	f2c0 827b 	blt.w	8006758 <__ieee754_powf+0x550>
 8006262:	15fb      	asrs	r3, r7, #23
 8006264:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006268:	fa47 f603 	asr.w	r6, r7, r3
 800626c:	fa06 f303 	lsl.w	r3, r6, r3
 8006270:	42bb      	cmp	r3, r7
 8006272:	f040 8271 	bne.w	8006758 <__ieee754_powf+0x550>
 8006276:	f006 0601 	and.w	r6, r6, #1
 800627a:	f1c6 0602 	rsb	r6, r6, #2
 800627e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006282:	d120      	bne.n	80062c6 <__ieee754_powf+0xbe>
 8006284:	2d00      	cmp	r5, #0
 8006286:	f280 8264 	bge.w	8006752 <__ieee754_powf+0x54a>
 800628a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800628e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006292:	e00d      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006294:	2600      	movs	r6, #0
 8006296:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800629a:	d1f0      	bne.n	800627e <__ieee754_powf+0x76>
 800629c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80062a0:	f000 8251 	beq.w	8006746 <__ieee754_powf+0x53e>
 80062a4:	dd0a      	ble.n	80062bc <__ieee754_powf+0xb4>
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	f280 8250 	bge.w	800674c <__ieee754_powf+0x544>
 80062ac:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80065ac <__ieee754_powf+0x3a4>
 80062b0:	ecbd 8b02 	vpop	{d8}
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	2602      	movs	r6, #2
 80062ba:	e7ec      	b.n	8006296 <__ieee754_powf+0x8e>
 80062bc:	2d00      	cmp	r5, #0
 80062be:	daf5      	bge.n	80062ac <__ieee754_powf+0xa4>
 80062c0:	eeb1 0a68 	vneg.f32	s0, s17
 80062c4:	e7f4      	b.n	80062b0 <__ieee754_powf+0xa8>
 80062c6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80062ca:	d102      	bne.n	80062d2 <__ieee754_powf+0xca>
 80062cc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80062d0:	e7ee      	b.n	80062b0 <__ieee754_powf+0xa8>
 80062d2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80062d6:	eeb0 0a48 	vmov.f32	s0, s16
 80062da:	d108      	bne.n	80062ee <__ieee754_powf+0xe6>
 80062dc:	f1b8 0f00 	cmp.w	r8, #0
 80062e0:	db05      	blt.n	80062ee <__ieee754_powf+0xe6>
 80062e2:	ecbd 8b02 	vpop	{d8}
 80062e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ea:	f000 ba4d 	b.w	8006788 <__ieee754_sqrtf>
 80062ee:	f000 fa4e 	bl	800678e <fabsf>
 80062f2:	b124      	cbz	r4, 80062fe <__ieee754_powf+0xf6>
 80062f4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80062f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80062fc:	d117      	bne.n	800632e <__ieee754_powf+0x126>
 80062fe:	2d00      	cmp	r5, #0
 8006300:	bfbc      	itt	lt
 8006302:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006306:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800630a:	f1b8 0f00 	cmp.w	r8, #0
 800630e:	dacf      	bge.n	80062b0 <__ieee754_powf+0xa8>
 8006310:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006314:	ea54 0306 	orrs.w	r3, r4, r6
 8006318:	d104      	bne.n	8006324 <__ieee754_powf+0x11c>
 800631a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800631e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006322:	e7c5      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006324:	2e01      	cmp	r6, #1
 8006326:	d1c3      	bne.n	80062b0 <__ieee754_powf+0xa8>
 8006328:	eeb1 0a40 	vneg.f32	s0, s0
 800632c:	e7c0      	b.n	80062b0 <__ieee754_powf+0xa8>
 800632e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006332:	3801      	subs	r0, #1
 8006334:	ea56 0300 	orrs.w	r3, r6, r0
 8006338:	d104      	bne.n	8006344 <__ieee754_powf+0x13c>
 800633a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800633e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006342:	e7b5      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006344:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006348:	dd6b      	ble.n	8006422 <__ieee754_powf+0x21a>
 800634a:	4b99      	ldr	r3, [pc, #612]	; (80065b0 <__ieee754_powf+0x3a8>)
 800634c:	429c      	cmp	r4, r3
 800634e:	dc06      	bgt.n	800635e <__ieee754_powf+0x156>
 8006350:	2d00      	cmp	r5, #0
 8006352:	daab      	bge.n	80062ac <__ieee754_powf+0xa4>
 8006354:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80065b4 <__ieee754_powf+0x3ac>
 8006358:	ee20 0a00 	vmul.f32	s0, s0, s0
 800635c:	e7a8      	b.n	80062b0 <__ieee754_powf+0xa8>
 800635e:	4b96      	ldr	r3, [pc, #600]	; (80065b8 <__ieee754_powf+0x3b0>)
 8006360:	429c      	cmp	r4, r3
 8006362:	dd02      	ble.n	800636a <__ieee754_powf+0x162>
 8006364:	2d00      	cmp	r5, #0
 8006366:	dcf5      	bgt.n	8006354 <__ieee754_powf+0x14c>
 8006368:	e7a0      	b.n	80062ac <__ieee754_powf+0xa4>
 800636a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800636e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006372:	eddf 6a92 	vldr	s13, [pc, #584]	; 80065bc <__ieee754_powf+0x3b4>
 8006376:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800637a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800637e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006382:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006386:	ee20 7a00 	vmul.f32	s14, s0, s0
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80065c0 <__ieee754_powf+0x3b8>
 8006392:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006396:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80065c4 <__ieee754_powf+0x3bc>
 800639a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800639e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80065c8 <__ieee754_powf+0x3c0>
 80063a2:	eef0 6a67 	vmov.f32	s13, s15
 80063a6:	eee0 6a07 	vfma.f32	s13, s0, s14
 80063aa:	ee16 3a90 	vmov	r3, s13
 80063ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063b2:	f023 030f 	bic.w	r3, r3, #15
 80063b6:	ee00 3a90 	vmov	s1, r3
 80063ba:	eee0 0a47 	vfms.f32	s1, s0, s14
 80063be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063c2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80063c6:	f025 050f 	bic.w	r5, r5, #15
 80063ca:	ee07 5a10 	vmov	s14, r5
 80063ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80063d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80063de:	3e01      	subs	r6, #1
 80063e0:	ea56 0200 	orrs.w	r2, r6, r0
 80063e4:	ee07 5a10 	vmov	s14, r5
 80063e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80063f0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80063f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80063f8:	ee17 4a10 	vmov	r4, s14
 80063fc:	bf08      	it	eq
 80063fe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006402:	2c00      	cmp	r4, #0
 8006404:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006408:	f340 8184 	ble.w	8006714 <__ieee754_powf+0x50c>
 800640c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006410:	f340 80fc 	ble.w	800660c <__ieee754_powf+0x404>
 8006414:	eddf 7a67 	vldr	s15, [pc, #412]	; 80065b4 <__ieee754_powf+0x3ac>
 8006418:	ee28 0a27 	vmul.f32	s0, s16, s15
 800641c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006420:	e746      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006422:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006426:	bf01      	itttt	eq
 8006428:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80065cc <__ieee754_powf+0x3c4>
 800642c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006430:	f06f 0217 	mvneq.w	r2, #23
 8006434:	ee17 4a90 	vmoveq	r4, s15
 8006438:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800643c:	bf18      	it	ne
 800643e:	2200      	movne	r2, #0
 8006440:	3b7f      	subs	r3, #127	; 0x7f
 8006442:	4413      	add	r3, r2
 8006444:	4a62      	ldr	r2, [pc, #392]	; (80065d0 <__ieee754_powf+0x3c8>)
 8006446:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800644a:	4294      	cmp	r4, r2
 800644c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006450:	dd06      	ble.n	8006460 <__ieee754_powf+0x258>
 8006452:	4a60      	ldr	r2, [pc, #384]	; (80065d4 <__ieee754_powf+0x3cc>)
 8006454:	4294      	cmp	r4, r2
 8006456:	f340 80a4 	ble.w	80065a2 <__ieee754_powf+0x39a>
 800645a:	3301      	adds	r3, #1
 800645c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006460:	2400      	movs	r4, #0
 8006462:	4a5d      	ldr	r2, [pc, #372]	; (80065d8 <__ieee754_powf+0x3d0>)
 8006464:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006468:	ee07 1a90 	vmov	s15, r1
 800646c:	ed92 7a00 	vldr	s14, [r2]
 8006470:	4a5a      	ldr	r2, [pc, #360]	; (80065dc <__ieee754_powf+0x3d4>)
 8006472:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006476:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800647a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800647e:	1049      	asrs	r1, r1, #1
 8006480:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006484:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006488:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800648c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8006490:	ee06 1a10 	vmov	s12, r1
 8006494:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006498:	ee36 7a47 	vsub.f32	s14, s12, s14
 800649c:	ee14 7a90 	vmov	r7, s9
 80064a0:	4017      	ands	r7, r2
 80064a2:	ee05 7a90 	vmov	s11, r7
 80064a6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80064aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064ae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80065e0 <__ieee754_powf+0x3d8>
 80064b2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80064b6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80064ba:	ee25 6a26 	vmul.f32	s12, s10, s13
 80064be:	eddf 6a49 	vldr	s13, [pc, #292]	; 80065e4 <__ieee754_powf+0x3dc>
 80064c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80064c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065e8 <__ieee754_powf+0x3e0>
 80064ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80064ce:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80065bc <__ieee754_powf+0x3b4>
 80064d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064d6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80065ec <__ieee754_powf+0x3e4>
 80064da:	eee7 6a27 	vfma.f32	s13, s14, s15
 80064de:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80065f0 <__ieee754_powf+0x3e8>
 80064e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80064e6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80064ea:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80064ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 80064f2:	eee5 6a07 	vfma.f32	s13, s10, s14
 80064f6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80064fa:	eef0 7a45 	vmov.f32	s15, s10
 80064fe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006506:	ee17 1a90 	vmov	r1, s15
 800650a:	4011      	ands	r1, r2
 800650c:	ee07 1a90 	vmov	s15, r1
 8006510:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006514:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006518:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800651c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006520:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006524:	eeb0 6a47 	vmov.f32	s12, s14
 8006528:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800652c:	ee16 1a10 	vmov	r1, s12
 8006530:	4011      	ands	r1, r2
 8006532:	ee06 1a90 	vmov	s13, r1
 8006536:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800653a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80065f4 <__ieee754_powf+0x3ec>
 800653e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065f8 <__ieee754_powf+0x3f0>
 8006542:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006546:	ee06 1a10 	vmov	s12, r1
 800654a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800654e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80065fc <__ieee754_powf+0x3f4>
 8006552:	492b      	ldr	r1, [pc, #172]	; (8006600 <__ieee754_powf+0x3f8>)
 8006554:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800655c:	edd1 7a00 	vldr	s15, [r1]
 8006560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	4b26      	ldr	r3, [pc, #152]	; (8006604 <__ieee754_powf+0x3fc>)
 800656a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800656e:	eef0 7a47 	vmov.f32	s15, s14
 8006572:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800657a:	edd4 0a00 	vldr	s1, [r4]
 800657e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006586:	ee17 3a90 	vmov	r3, s15
 800658a:	4013      	ands	r3, r2
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006594:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006598:	eee6 6a65 	vfms.f32	s13, s12, s11
 800659c:	ee77 7a66 	vsub.f32	s15, s14, s13
 80065a0:	e70f      	b.n	80063c2 <__ieee754_powf+0x1ba>
 80065a2:	2401      	movs	r4, #1
 80065a4:	e75d      	b.n	8006462 <__ieee754_powf+0x25a>
 80065a6:	bf00      	nop
 80065a8:	08006998 	.word	0x08006998
 80065ac:	00000000 	.word	0x00000000
 80065b0:	3f7ffff7 	.word	0x3f7ffff7
 80065b4:	7149f2ca 	.word	0x7149f2ca
 80065b8:	3f800007 	.word	0x3f800007
 80065bc:	3eaaaaab 	.word	0x3eaaaaab
 80065c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80065c4:	36eca570 	.word	0x36eca570
 80065c8:	3fb8aa00 	.word	0x3fb8aa00
 80065cc:	4b800000 	.word	0x4b800000
 80065d0:	001cc471 	.word	0x001cc471
 80065d4:	005db3d6 	.word	0x005db3d6
 80065d8:	0800699c 	.word	0x0800699c
 80065dc:	fffff000 	.word	0xfffff000
 80065e0:	3e6c3255 	.word	0x3e6c3255
 80065e4:	3e53f142 	.word	0x3e53f142
 80065e8:	3e8ba305 	.word	0x3e8ba305
 80065ec:	3edb6db7 	.word	0x3edb6db7
 80065f0:	3f19999a 	.word	0x3f19999a
 80065f4:	3f76384f 	.word	0x3f76384f
 80065f8:	3f763800 	.word	0x3f763800
 80065fc:	369dc3a0 	.word	0x369dc3a0
 8006600:	080069ac 	.word	0x080069ac
 8006604:	080069a4 	.word	0x080069a4
 8006608:	3338aa3c 	.word	0x3338aa3c
 800660c:	f040 8092 	bne.w	8006734 <__ieee754_powf+0x52c>
 8006610:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006608 <__ieee754_powf+0x400>
 8006614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006618:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800661c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	f73f aef6 	bgt.w	8006414 <__ieee754_powf+0x20c>
 8006628:	15db      	asrs	r3, r3, #23
 800662a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800662e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006632:	4103      	asrs	r3, r0
 8006634:	4423      	add	r3, r4
 8006636:	4949      	ldr	r1, [pc, #292]	; (800675c <__ieee754_powf+0x554>)
 8006638:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800663c:	3a7f      	subs	r2, #127	; 0x7f
 800663e:	4111      	asrs	r1, r2
 8006640:	ea23 0101 	bic.w	r1, r3, r1
 8006644:	ee07 1a10 	vmov	s14, r1
 8006648:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800664c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006650:	f1c2 0217 	rsb	r2, r2, #23
 8006654:	4110      	asrs	r0, r2
 8006656:	2c00      	cmp	r4, #0
 8006658:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800665c:	bfb8      	it	lt
 800665e:	4240      	neglt	r0, r0
 8006660:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006664:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006760 <__ieee754_powf+0x558>
 8006668:	ee17 3a10 	vmov	r3, s14
 800666c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006670:	f023 030f 	bic.w	r3, r3, #15
 8006674:	ee07 3a10 	vmov	s14, r3
 8006678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800667c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006680:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006764 <__ieee754_powf+0x55c>
 8006684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006688:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800668c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006768 <__ieee754_powf+0x560>
 8006690:	eeb0 0a67 	vmov.f32	s0, s15
 8006694:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006698:	eeb0 6a40 	vmov.f32	s12, s0
 800669c:	eea7 6a66 	vfms.f32	s12, s14, s13
 80066a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80066a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80066a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800676c <__ieee754_powf+0x564>
 80066ac:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8006770 <__ieee754_powf+0x568>
 80066b0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80066b4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006774 <__ieee754_powf+0x56c>
 80066b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80066bc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006778 <__ieee754_powf+0x570>
 80066c0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80066c4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800677c <__ieee754_powf+0x574>
 80066c8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80066cc:	eeb0 6a40 	vmov.f32	s12, s0
 80066d0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80066d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066d8:	eeb0 7a46 	vmov.f32	s14, s12
 80066dc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80066e0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80066e4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80066e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80066ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80066f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80066f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80066fc:	ee10 3a10 	vmov	r3, s0
 8006700:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006708:	da1a      	bge.n	8006740 <__ieee754_powf+0x538>
 800670a:	f000 f8b7 	bl	800687c <scalbnf>
 800670e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006712:	e5cd      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006714:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <__ieee754_powf+0x578>)
 8006716:	4293      	cmp	r3, r2
 8006718:	dd02      	ble.n	8006720 <__ieee754_powf+0x518>
 800671a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006784 <__ieee754_powf+0x57c>
 800671e:	e67b      	b.n	8006418 <__ieee754_powf+0x210>
 8006720:	d108      	bne.n	8006734 <__ieee754_powf+0x52c>
 8006722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006726:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672e:	f6ff af7b 	blt.w	8006628 <__ieee754_powf+0x420>
 8006732:	e7f2      	b.n	800671a <__ieee754_powf+0x512>
 8006734:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006738:	f73f af76 	bgt.w	8006628 <__ieee754_powf+0x420>
 800673c:	2000      	movs	r0, #0
 800673e:	e78f      	b.n	8006660 <__ieee754_powf+0x458>
 8006740:	ee00 3a10 	vmov	s0, r3
 8006744:	e7e3      	b.n	800670e <__ieee754_powf+0x506>
 8006746:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800674a:	e5b1      	b.n	80062b0 <__ieee754_powf+0xa8>
 800674c:	eeb0 0a68 	vmov.f32	s0, s17
 8006750:	e5ae      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006752:	eeb0 0a48 	vmov.f32	s0, s16
 8006756:	e5ab      	b.n	80062b0 <__ieee754_powf+0xa8>
 8006758:	2600      	movs	r6, #0
 800675a:	e590      	b.n	800627e <__ieee754_powf+0x76>
 800675c:	007fffff 	.word	0x007fffff
 8006760:	3f317218 	.word	0x3f317218
 8006764:	35bfbe8c 	.word	0x35bfbe8c
 8006768:	3f317200 	.word	0x3f317200
 800676c:	3331bb4c 	.word	0x3331bb4c
 8006770:	b5ddea0e 	.word	0xb5ddea0e
 8006774:	388ab355 	.word	0x388ab355
 8006778:	bb360b61 	.word	0xbb360b61
 800677c:	3e2aaaab 	.word	0x3e2aaaab
 8006780:	43160000 	.word	0x43160000
 8006784:	0da24260 	.word	0x0da24260

08006788 <__ieee754_sqrtf>:
 8006788:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800678c:	4770      	bx	lr

0800678e <fabsf>:
 800678e:	ee10 3a10 	vmov	r3, s0
 8006792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006796:	ee00 3a10 	vmov	s0, r3
 800679a:	4770      	bx	lr

0800679c <finitef>:
 800679c:	b082      	sub	sp, #8
 800679e:	ed8d 0a01 	vstr	s0, [sp, #4]
 80067a2:	9801      	ldr	r0, [sp, #4]
 80067a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80067a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80067ac:	bfac      	ite	ge
 80067ae:	2000      	movge	r0, #0
 80067b0:	2001      	movlt	r0, #1
 80067b2:	b002      	add	sp, #8
 80067b4:	4770      	bx	lr
	...

080067b8 <nanf>:
 80067b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067c0 <nanf+0x8>
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	7fc00000 	.word	0x7fc00000

080067c4 <rintf>:
 80067c4:	ee10 2a10 	vmov	r2, s0
 80067c8:	b513      	push	{r0, r1, r4, lr}
 80067ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80067ce:	397f      	subs	r1, #127	; 0x7f
 80067d0:	2916      	cmp	r1, #22
 80067d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80067d6:	dc47      	bgt.n	8006868 <rintf+0xa4>
 80067d8:	b32b      	cbz	r3, 8006826 <rintf+0x62>
 80067da:	2900      	cmp	r1, #0
 80067dc:	ee10 3a10 	vmov	r3, s0
 80067e0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80067e4:	da21      	bge.n	800682a <rintf+0x66>
 80067e6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80067ea:	425b      	negs	r3, r3
 80067ec:	4921      	ldr	r1, [pc, #132]	; (8006874 <rintf+0xb0>)
 80067ee:	0a5b      	lsrs	r3, r3, #9
 80067f0:	0d12      	lsrs	r2, r2, #20
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	0512      	lsls	r2, r2, #20
 80067f8:	4313      	orrs	r3, r2
 80067fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	edd1 6a00 	vldr	s13, [r1]
 8006806:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800680a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800680e:	eddd 7a01 	vldr	s15, [sp, #4]
 8006812:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006816:	ee17 3a90 	vmov	r3, s15
 800681a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800681e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006822:	ee00 3a10 	vmov	s0, r3
 8006826:	b002      	add	sp, #8
 8006828:	bd10      	pop	{r4, pc}
 800682a:	4a13      	ldr	r2, [pc, #76]	; (8006878 <rintf+0xb4>)
 800682c:	410a      	asrs	r2, r1
 800682e:	4213      	tst	r3, r2
 8006830:	d0f9      	beq.n	8006826 <rintf+0x62>
 8006832:	0854      	lsrs	r4, r2, #1
 8006834:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006838:	d006      	beq.n	8006848 <rintf+0x84>
 800683a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800683e:	ea23 0304 	bic.w	r3, r3, r4
 8006842:	fa42 f101 	asr.w	r1, r2, r1
 8006846:	430b      	orrs	r3, r1
 8006848:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <rintf+0xb0>)
 800684a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800684e:	ed90 7a00 	vldr	s14, [r0]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685a:	edcd 7a01 	vstr	s15, [sp, #4]
 800685e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006862:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006866:	e7de      	b.n	8006826 <rintf+0x62>
 8006868:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800686c:	d3db      	bcc.n	8006826 <rintf+0x62>
 800686e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006872:	e7d8      	b.n	8006826 <rintf+0x62>
 8006874:	080069b4 	.word	0x080069b4
 8006878:	007fffff 	.word	0x007fffff

0800687c <scalbnf>:
 800687c:	ee10 3a10 	vmov	r3, s0
 8006880:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006884:	d025      	beq.n	80068d2 <scalbnf+0x56>
 8006886:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800688a:	d302      	bcc.n	8006892 <scalbnf+0x16>
 800688c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006890:	4770      	bx	lr
 8006892:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006896:	d122      	bne.n	80068de <scalbnf+0x62>
 8006898:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <scalbnf+0xc8>)
 800689a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006948 <scalbnf+0xcc>
 800689e:	4298      	cmp	r0, r3
 80068a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068a4:	db16      	blt.n	80068d4 <scalbnf+0x58>
 80068a6:	ee10 3a10 	vmov	r3, s0
 80068aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80068ae:	3a19      	subs	r2, #25
 80068b0:	4402      	add	r2, r0
 80068b2:	2afe      	cmp	r2, #254	; 0xfe
 80068b4:	dd15      	ble.n	80068e2 <scalbnf+0x66>
 80068b6:	ee10 3a10 	vmov	r3, s0
 80068ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800694c <scalbnf+0xd0>
 80068be:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006950 <scalbnf+0xd4>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	eeb0 7a67 	vmov.f32	s14, s15
 80068c8:	bfb8      	it	lt
 80068ca:	eef0 7a66 	vmovlt.f32	s15, s13
 80068ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 80068d2:	4770      	bx	lr
 80068d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006954 <scalbnf+0xd8>
 80068d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068dc:	4770      	bx	lr
 80068de:	0dd2      	lsrs	r2, r2, #23
 80068e0:	e7e6      	b.n	80068b0 <scalbnf+0x34>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	dd06      	ble.n	80068f4 <scalbnf+0x78>
 80068e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80068ee:	ee00 3a10 	vmov	s0, r3
 80068f2:	4770      	bx	lr
 80068f4:	f112 0f16 	cmn.w	r2, #22
 80068f8:	da1a      	bge.n	8006930 <scalbnf+0xb4>
 80068fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068fe:	4298      	cmp	r0, r3
 8006900:	ee10 3a10 	vmov	r3, s0
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	dd0a      	ble.n	8006920 <scalbnf+0xa4>
 800690a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800694c <scalbnf+0xd0>
 800690e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006950 <scalbnf+0xd4>
 8006912:	eef0 7a40 	vmov.f32	s15, s0
 8006916:	2b00      	cmp	r3, #0
 8006918:	bf18      	it	ne
 800691a:	eeb0 0a47 	vmovne.f32	s0, s14
 800691e:	e7db      	b.n	80068d8 <scalbnf+0x5c>
 8006920:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006954 <scalbnf+0xd8>
 8006924:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006958 <scalbnf+0xdc>
 8006928:	eef0 7a40 	vmov.f32	s15, s0
 800692c:	2b00      	cmp	r3, #0
 800692e:	e7f3      	b.n	8006918 <scalbnf+0x9c>
 8006930:	3219      	adds	r2, #25
 8006932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006936:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800693a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800695c <scalbnf+0xe0>
 800693e:	ee07 3a10 	vmov	s14, r3
 8006942:	e7c4      	b.n	80068ce <scalbnf+0x52>
 8006944:	ffff3cb0 	.word	0xffff3cb0
 8006948:	4c000000 	.word	0x4c000000
 800694c:	7149f2ca 	.word	0x7149f2ca
 8006950:	f149f2ca 	.word	0xf149f2ca
 8006954:	0da24260 	.word	0x0da24260
 8006958:	8da24260 	.word	0x8da24260
 800695c:	33000000 	.word	0x33000000

08006960 <_init>:
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006962:	bf00      	nop
 8006964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006966:	bc08      	pop	{r3}
 8006968:	469e      	mov	lr, r3
 800696a:	4770      	bx	lr

0800696c <_fini>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	bf00      	nop
 8006970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006972:	bc08      	pop	{r3}
 8006974:	469e      	mov	lr, r3
 8006976:	4770      	bx	lr
